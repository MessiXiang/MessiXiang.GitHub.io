<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>北航计组-预习0-预习准备</title>
      <link href="//post/buaa-co-pre-0.html"/>
      <url>//post/buaa-co-pre-0.html</url>
      
        <content type="html"><![CDATA[<h1 id="计组预习-Part0"><a href="#计组预习-Part0" class="headerlink" title="计组预习-Part0"></a>计组预习-Part0</h1><p>第一天预习就先看一下课程内容，我打算先从课程内容开始，整理一下预习的过程，然后按顺序预习，中途可以补一些题或者看一下教材，主要还是打算用往年课件作为第一次预习的资料，符合我个人习惯一些。</p><h2 id="课程组成"><a href="#课程组成" class="headerlink" title="课程组成"></a>课程组成</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>反正就是学硬件、软硬件协同、设计硬件、从数电到MIPS到MIPS程序</p><h3 id="大概有的课"><a href="#大概有的课" class="headerlink" title="大概有的课"></a>大概有的课</h3><ul><li>概论一节</li><li>组合、时序逻辑（似乎电电B讲过了）</li><li>存储器、存储系统、方式</li><li>指令、汇编</li><li>MIPS<br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co2.png" alt="大致安排"><br>不同的课会排在不同的时间，具体看到时候安排吧。</li></ul><h3 id="学习内容"><a href="#学习内容" class="headerlink" title="学习内容"></a>学习内容</h3><ol><li>基本原理</li><li>硬件描述语言（<strong>HDL</strong>）</li><li>Verilog</li><li>软件工具：logisim</li><li>软件工具：MARS</li><li>软硬件调试</li></ol><h2 id="预习安排"><a href="#预习安排" class="headerlink" title="预习安排"></a>预习安排</h2><p>大致上我应该每一讲都会写一次笔记，前面会附上本次课程的目标与内容，顺序上先学习理论课，实验课后续补上，中途我可能会自己穿插一些练习，不再赘述，参考网站我也会附上的。其他有些资源我会扔到OSS上面，有需要的可以看情况下载。</p><p>课程安排应该是预备阶段<strong>week1-6</strong>，后续是任务阶段<strong>week7-17</strong>，我打算先把预备阶段准备好，后续P0-P8再说吧，先不急。</p><h2 id="一点疑惑"><a href="#一点疑惑" class="headerlink" title="一点疑惑"></a>一点疑惑</h2><p>似乎2022课件相比2018课件把存储部分都删了？</p>]]></content>
      
      
      <categories>
          
          <category> 北航计组 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>北航计组-预习1-基本认识与数制</title>
      <link href="//post/buaa-co-pre-1.html"/>
      <url>//post/buaa-co-pre-1.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本认识"><a href="#基本认识" class="headerlink" title="基本认识"></a>基本认识</h1><h2 id="计算机的基本认识"><a href="#计算机的基本认识" class="headerlink" title="计算机的基本认识"></a>计算机的基本认识</h2><h3 id="发展过程"><a href="#发展过程" class="headerlink" title="发展过程"></a>发展过程</h3><ul><li>ENIAC；第一台数字式多用途计算机<ul><li>计算炮弹弹道（逃）</li></ul></li><li>大型机时代：20c50s-60s</li><li>小型机时代：20c70s</li><li>PC时代：20c80s-21c</li><li>后PC时代：21c之后</li></ul><h3 id="重大认识"><a href="#重大认识" class="headerlink" title="重大认识"></a>重大认识</h3><ol><li>层次化表示与解释</li></ol><ul><li>任何事物都可以表示为数字</li></ul><ol start="2"><li>摩尔定律</li></ol><ul><li>晶体管数量每两年翻倍</li></ul><ol start="3"><li>局部性与存储层次</li><li>并行性</li><li>性能度量与改进</li></ol><h2 id="计算机的应用与分类"><a href="#计算机的应用与分类" class="headerlink" title="计算机的应用与分类"></a>计算机的应用与分类</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>PC</li><li>服务器</li><li>服务器集群</li><li>超级计算机</li><li>嵌入式计算机（最大的计算机市场）</li></ul><h2 id="计算机的基本硬件构成"><a href="#计算机的基本硬件构成" class="headerlink" title="计算机的基本硬件构成"></a>计算机的基本硬件构成</h2><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co3.png" alt="CPU"><br>CPU是计算机的最核心部件，其功能是能够执行由一组指令构成的程序。<br>抽象为两个部分：数据通路、控制器</p><ul><li>数据通路：执行指令所需的计算与存储的功能部件集合<ul><li>PC：指向要执行的指令</li><li>ALU：完成各类计算，如加减乘除</li><li>寄存器堆：临时性存储参与运算的数据以及运算结果</li></ul></li><li>控制器：根据指令控制数据通路的各个部件完成相应操作</li></ul><p>评价为：数据通路是干活的鼠鼠，控制器是指使干活的可恶猫猫。</p><p>而对于现代主流CPU：<br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co4.png" alt="现代CPU"><br>通常包含cache、MMU，每个核心相当于过去的一个完整CPU</p><h3 id="主存储器"><a href="#主存储器" class="headerlink" title="主存储器"></a>主存储器</h3><p>也被称为内存，而CD、硬盘之类的东西叫做<strong>外存（辅存）</strong></p><p>早期内存只有几个K，现在动辄以G字节计数。</p><h2 id="计算机的层次结构"><a href="#计算机的层次结构" class="headerlink" title="计算机的层次结构"></a>计算机的层次结构</h2><p>一个完整的计算机系统，可以划分为硬件和软件两大部分。其中，两者之间的交互界面就是指令集：<br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co5.png" alt="计算机系统"></p><h1 id="数制"><a href="#数制" class="headerlink" title="数制"></a>数制</h1><h2 id="常见进制及其转换"><a href="#常见进制及其转换" class="headerlink" title="常见进制及其转换"></a>常见进制及其转换</h2><h3 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h3><p>对于$d_{n-1}d_{n-2}…d_{1}d_{0}$来说，它的值是：</p><p>$$<br>d_{n-1}*B^{n-1}+d_{n-2}*B^{n-2}+…+d_{0}*B^{0}<br>$$</p><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><p>每一位称之为一个bit。其基为{0,1}</p><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><p>其实就是转换前的数一直除以转换后进制的进制数，之后取余数，从最低位到最高位，比如10转2进制：<br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co6.png" alt="10to2"><br>16、8、2进制的互转比较容易，因为刚好可以对应。</p><h2 id="常见术语"><a href="#常见术语" class="headerlink" title="常见术语"></a>常见术语</h2><ul><li>字节<strong>byte</strong><ul><li>由8个二进制位构成的一个元组，是目前计算机的数据单位</li></ul></li><li>字<strong>word</strong><ul><li>根据计算机的不同而不同，可能是32位、64位等等</li></ul></li><li>最高有效位<strong>MSB</strong></li><li>最低有效位<strong>LSB</strong></li><li>最高有效字节<strong>MSB</strong></li><li>最低有效字节<strong>LSB</strong><ul><li>高在左，低在右</li></ul></li></ul><h2 id="二进制加法"><a href="#二进制加法" class="headerlink" title="二进制加法"></a>二进制加法</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>二进制加法与十进制加法原理类似，对应位相加就行，加到2就进位一个1即可：<br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co7.png" alt="plus"><br>由于一个字的长度是有限制的，比如32位计算机最高位两个1相加，此时就会发生<strong>溢出</strong>（overflow），一般来说，CPU在溢出发生时，会通过称为异常（exception）的机制来报告这个错误。</p><h2 id="整数的二进制表示方法"><a href="#整数的二进制表示方法" class="headerlink" title="整数的二进制表示方法"></a>整数的二进制表示方法</h2><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>对于一个数字来说，其包含2部分内容:</p><ul><li>编码：就是数字本身，或者说是一种记号。例如007</li><li>语义：编码所代表的概念的含义，是对编码的解释</li></ul><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">提示</p><p>编码本身没有任何意义，编码只有被赋予语义后才有意义</p></div><h3 id="编码空间"><a href="#编码空间" class="headerlink" title="编码空间"></a>编码空间</h3><ul><li>编码空间：有效编码的集合</li><li>空间大小：有效编码的总数<ul><li>对于一个n位B进制数来说，其编码空间大小为$B^n$</li></ul></li></ul><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">提示</p><p>Q：对于某个B进制来说，如何确定某个编码方案的编码位数？<br>A：如果对象数量为N，则位数为$\lceil log^N_B \rceil$</p></div><h3 id="二进制无符号数"><a href="#二进制无符号数" class="headerlink" title="二进制无符号数"></a>二进制无符号数</h3><p>对于二进制无符号数如下：<br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co8.png" alt="binary"></p><h3 id="二进制符号数"><a href="#二进制符号数" class="headerlink" title="二进制符号数"></a>二进制符号数</h3><h4 id="原码方案"><a href="#原码方案" class="headerlink" title="原码方案"></a>原码方案</h4><p>用最高位代表符号，<strong>0为正1为负</strong>，其余位数为绝对值，比如：</p><p>$$<br>0010_2 &#x3D; 2_{10}<br>$$</p><p>$$<br>1010_2 &#x3D; -2_{10}<br>$$</p><div class="custom-quote warning"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 8V13"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 15.99V16.01"></path></svg></span><p class="custom-quote-title">缺点</p><ol><li>存在两个0，即$0000_2$和$1000_2$<ul><li>有效编码被浪费</li><li>硬件加法难以实现</li></ul></li><li>编码数值不连续<ul><li>并且在正负区域并非连续增大</li></ul></li></ol></div><h4 id="补码方案"><a href="#补码方案" class="headerlink" title="补码方案"></a>补码方案</h4><p>用最高位代表符号，<strong>0为正1为负</strong>，100…000是最小的负数，而111…111是-1</p><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">特点</p><p><ol><li>只有一个0</li><li>符号确定后，数值随编码增长而增长</li></ol></p></div><p>表示范围可以为-2147483648到2147483647</p><p>对于一个$x_{N-1}x_{N-2}…x_{1}x_{0}$的N位二进制补码代表的数，它的值为：</p><p>$$<br>x_{N-1} \cdot (-2^{N-1})+\sum\limits_{i&#x3D;0}^{n-2}x_i \cdot 2^i<br>$$</p><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">小结</p><ul><li>现代计算机普遍采用</li><li>使用最高位作为符号位</li><li>负数区间比正数区间多一个数</li><li>相反数计算方法：各位取反，然后加1</li></ul></div><h2 id="浮点数的二进制表示方法"><a href="#浮点数的二进制表示方法" class="headerlink" title="浮点数的二进制表示方法"></a>浮点数的二进制表示方法</h2><h3 id="浮点数格式"><a href="#浮点数格式" class="headerlink" title="浮点数格式"></a>浮点数格式</h3><p>每个浮点数都类似科学计数法可以表述为：$\pm M \cdot B^E$</p><p>其中M为尾数，B为基数，E为指数<br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co9.png" alt="float"></p><ul><li>包含符号S，尾数、指数、基数，其中基数被省略了</li><li>符号一位，0正1负</li><li>指数八位，表示范围</li><li>尾数23位，表示精度</li><li>基数默认为<strong>2</strong></li></ul><p>我们考虑到二进制尾数的第一位保证是<strong>1</strong>，如果不是的话说明指数取大了，那么为了优化，我们可以默认尾数最高位为1，这样就可以在尾数里面多一位有效的存储位了，只是计算的时候得补回来，我们以$5.23*10^{3}$为例：</p><p>$$<br>5.23 \times 10^{3}&#x3D;5230_{10}&#x3D;1010001101110_{2}&#x3D;1.010001101110_{2} \times 2^{12}<br>$$<br>此时尾数1.010001101110，我们优化成<strong>010001101110</strong><br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co10.png" alt="youhua"></p><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">提示</p><p>绝对值小于1的浮点数的二进制编码对应的数相比其大于1的数更大一些，因为其指数部分是负数，取补码的时候最高位为1，比指数为正的数字会更大一些。</p></div><h3 id="偏阶计数法"><a href="#偏阶计数法" class="headerlink" title="偏阶计数法"></a>偏阶计数法</h3><p>本质上就是把编码用的指数变成真实指数（的二进制）加上十进制的127，即$01111111_{2}$，此时就可以让$00000000_{2}$对应最小的负指数（即0减去127）了，同时$11111111_{2}$是最大的正指数（255减去127）<br><strong>但是由于一些特殊情况，比如正负无穷和NaN的存在，导致实际上最大正指数是254-127&#x3D;127，同理最小其实是1-127&#x3D;-126</strong><br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co11.png" alt="pianjie"></p><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">提示</p><p>IEEE754浮点标准即此方法</p></div><p>此时表示范围也很明确了，比如正数范围最大是：$1.1111111111111111111111 \times 2^{127} \approx 3.402823 \times 10^{38}$，即除了第一位符号位是0，其他位全为1的数字。正数范围最小则为后23位是1，指数为全0的数：$1.1111111111111111111111 \times 2^{-126} \approx 1.175494 \times 10^{-38}$</p><p>负数区间和正数区间完全对称，此处略。</p><h3 id="双精度浮点"><a href="#双精度浮点" class="headerlink" title="双精度浮点"></a>双精度浮点</h3><p>IEEE754还规定了双精度浮点，也就是占据64位的浮点数，与单精度浮点区别如下：<br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co12.png" alt="double"></p><p>范围绝对值为从$2.22507385850720 \times 10^{-308}$到$1.79769313486232 \times 10^{308}$</p><h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><h4 id="编码规则"><a href="#编码规则" class="headerlink" title="编码规则"></a>编码规则</h4><p>如下表：<br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co13.png" alt="spec"></p><h4 id="上溢和下溢"><a href="#上溢和下溢" class="headerlink" title="上溢和下溢"></a>上溢和下溢</h4><p>当一个数绝对值超过了上界就是上溢，当作<strong>正负无穷</strong>处理，如果绝对值在下界和0之间那就是下溢，当作<strong>0</strong>来处理</p><h2 id="补码的几种常见运算"><a href="#补码的几种常见运算" class="headerlink" title="补码的几种常见运算"></a>补码的几种常见运算</h2><h3 id="计算相反数的补码"><a href="#计算相反数的补码" class="headerlink" title="计算相反数的补码"></a>计算相反数的补码</h3><p>很简单，先算正数的，之后全部取反再加一。比如我们计算-14的补码：</p><ul><li>14是$00001110_{2}$</li><li>取反就是$11110001_{2}$</li><li>再加一得到-14的补码：$11110010_{2}$<br>同理，从-14得到14的补码也是取反再加一，这种方法适用于所有求<strong>相反数</strong>的情况。</li></ul><h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><p>补码的优势在减法中充分体现：我们知道计算x+y很简单，只需要按位加法就行，只需要一套关于加法的电路，而补码的优势在于求减法的时候x-y可以变成**x+(-y)**，这时候就把减法化成加法和相反数了（在相反数的过程中也只有一次加法）。</p><h3 id="位拓展"><a href="#位拓展" class="headerlink" title="位拓展"></a>位拓展</h3><h4 id="符号拓展"><a href="#符号拓展" class="headerlink" title="符号拓展"></a>符号拓展</h4><p>需要先把一位的符号位复制过去到高位，其余对应位数对应复制过去即可。如下：<br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co14.png" alt="signed"></p><h4 id="符号拓展-1"><a href="#符号拓展-1" class="headerlink" title="符号拓展"></a>符号拓展</h4><p>其实本质是一样的，但是高位全部置0，低位复制过去即可：<br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co15.png" alt="unsigned"></p><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>&#x3D;、≠、&gt;、&lt;、≥、≤这六种比较都可以通过&lt;和&#x3D;符号来实现，此处略，很简单的。</p><h4 id="小于符号的实现"><a href="#小于符号的实现" class="headerlink" title="小于符号的实现"></a>小于符号的实现</h4><p>我们判断a小于b是通过a-b小于0来实现的，实际使用中判断a-b的符号位即可判断是否小于。</p><h5 id="符号数"><a href="#符号数" class="headerlink" title="符号数"></a>符号数</h5><p>在一个字是4bit的时候，遇上$a&#x3D;0$，$b&#x3D;-8$的时候，结果会因为溢出，变成$1000_{2}$，此时符号位变成了1，判断为a比b小，很明显是不对的。对于这种情况我们就需要<strong>符号位拓展</strong>：</p><ul><li>2个N位二进制补码的操作数均扩展1位符号位（即在最高位的左侧加上一位一摸一样的符号位）</li><li>进行N+1位二进制补码的减法计算</li></ul><p>此时会发现$0-8&#x3D;0+(-8)&#x3D;00000_{2}+00111_{2}+00001_{2}&#x3D;01000_{2}$，符号位为0，那么判断为a比b大，符合实际情况。</p><h5 id="无符号数"><a href="#无符号数" class="headerlink" title="无符号数"></a>无符号数</h5><p>如果两个数都是无符号数，需要将这俩个数视作符号数之后<strong>符号位拓展</strong>，并且都拓展一个0即可同上判断了。</p><h4 id="相等符号的实现"><a href="#相等符号的实现" class="headerlink" title="相等符号的实现"></a>相等符号的实现</h4><ol><li>使用XOR运算得到一个c，对c的每一位做OR运算得到一个bit，为1则$a&#x3D;b$为假，反之为真</li><li>执行减法运算得到一个c，之后同上</li></ol><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><p>基本原理就是无符号数的乘法。步骤就是先把a和b的绝对值按照无符号数乘法算出来，最后单独判断符号。<br><del><strong>TODO:讲义内没说怎么做的无符号数乘法，后面再看</strong></del><br>无符号数乘法和手算乘法一样，但是由于只有0和1更加简单，对应每一位乘数，如果该位为1，则将被乘数复制到位积内，若为0，这该位对应的位积为0，从低位到高位每个乘数的位都进行一次操作，最后按照乘数每一位的位置n，对各个位积向左移位n次，再累加即可。</p><h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><p>对于计算机来说除法最难实现，核心是“试商”。<br>对于二进制数，商只会有0和1两种情况，较为简单：</p><ul><li>计算商的每位时，仅需做一次减法</li><li>根据减法结果的符号位判断是否够减<br>如下图所示：<br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co16.png" alt="devide"></li></ul><h4 id="无符号数除法"><a href="#无符号数除法" class="headerlink" title="无符号数除法"></a>无符号数除法</h4><p>流程与上方相同，每次从被除数取出一位，构成<strong>中间余数</strong>的末位，然后“试商”，用中间余数减去除数，根据结果判断商的这一位是否为1，如果除数有N位，一定记住符号位拓展，中间余数得拓展到N+1位。</p><h4 id="符号数除法"><a href="#符号数除法" class="headerlink" title="符号数除法"></a>符号数除法</h4><p>先取绝对值做除法，之后单独判断符号，略。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="计算机基本认识"><a href="#计算机基本认识" class="headerlink" title="计算机基本认识"></a>计算机基本认识</h2><p>没啥用，随便看看得了</p><h2 id="数制-1"><a href="#数制-1" class="headerlink" title="数制"></a>数制</h2><ul><li>掌握变换数制的方法</li><li>掌握浮点数的编码（1+8+23）</li><li>了解加减乘除运算的原理（都是基于加法（和一些内置运算））</li></ul>]]></content>
      
      
      <categories>
          
          <category> 北航计组 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>折腾笔记-基于GithubPages制作博客里世界</title>
      <link href="//post/net-daily-ssl-domain.html"/>
      <url>//post/net-daily-ssl-domain.html</url>
      
        <content type="html"><![CDATA[<h1 id="折腾目标"><a href="#折腾目标" class="headerlink" title="折腾目标"></a>折腾目标</h1><h2 id="当前有什么"><a href="#当前有什么" class="headerlink" title="当前有什么"></a>当前有什么</h2><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">已经备好了</p><p>一个已经实名的顶级域名</p></div><h2 id="我要干什么"><a href="#我要干什么" class="headerlink" title="我要干什么"></a>我要干什么</h2><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">目标</p><p>搭建一个Github Page并且和本地HEXO利用git联动<br>建立二级域名CNAME解析到新的博客<br>二级域名SSL安装好<br>网站访问加速（TODO）</p></div><h1 id="折腾开始！"><a href="#折腾开始！" class="headerlink" title="折腾开始！"></a>折腾开始！</h1><h2 id="建立Github-Pages"><a href="#建立Github-Pages" class="headerlink" title="建立Github Pages"></a>建立Github Pages</h2><p>进入Github，点击你的repo进去并且点击new从而新建一个repo。<br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/post1/github1.png"><br>输入你的repository名字，必须为<strong>你的用户名.GitHub.io</strong>这个格式。其他的选项都可以默认即可<br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/post1/github2.png"><br>进入新建的repo，点击settings，在source选择deploy from a branch<br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/post1/github3.png"><br>至此，GitHub这边初步配置差不多了，目前你访问<strong>你的用户名.github.io</strong>暂时还不会有反应，因为GitHub pages更新页面需要时间，而且默认会扫描index.html&#x2F;README.md&#x2F;index之类的文件作为首页，但是目前repo是空的，所以不会显示任何内容，但是这是正常的，我们之后会往GitHub上面部署我们的网站。</p><details class="custom-details"><summary>一点修改（感谢2006-TrickEye）</summary><p>其实不一定非要是username.github.io，如果你对你的名字叫做repo的仓库打开GitHub Pages，部署出来的结果会挂到username.github.io&#x2F;repo&#x2F;下面</p></details><h2 id="本地配置hexo"><a href="#本地配置hexo" class="headerlink" title="本地配置hexo"></a>本地配置hexo</h2><p>首先你需要安装Node.js 和 npm，此处可以参考<a href="https://npm.nodejs.cn/cli/v8/configuring-npm/install">✨这个网页✨</a>，务必记住配置环境变量，但是你使用这个网页内的Windows Node版本管理器内的<strong>nodist</strong>的话就不需要自己设置了，安装好直接下一步就好。</p><p>以上安装好之后效果如下，如果没有的话检查一下环境变量的path里面有没有对应的文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm --version</span><br><span class="line">10.8.2</span><br><span class="line">$ node -v</span><br><span class="line">v20.9.0</span><br></pre></td></tr></table></figure><p>本地新建文件夹，比如叫做blog，用来存放本地hexo仓库文件，在powershell里面打开这个文件夹。<br>之后的步骤因为不可抗力原因🧱，请使用科学上网，如使用代理的话请输入下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm config <span class="built_in">set</span> proxy http://127.0.0.1:你自己的代理端口</span><br><span class="line">$ npm config <span class="built_in">set</span> https-proxy http://127.0.0.1:你自己的代理端口</span><br></pre></td></tr></table></figure><p>如果你实在没有代理，那么可以换淘宝源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org/</span><br><span class="line">$ npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">如果你不知道的话有一个小tips</p><p>大部分clash默认http和https的混合端口为<strong>7897</strong><br>但是你明明可以点开看一眼的……</p></div><p>之后就可以快乐安装hexo辣！依次输入以下命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ hexo init</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><div class="custom-quote warning"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 8V13"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 15.99V16.01"></path></svg></span><p class="custom-quote-title">注意</p><p>hexo init由于需要连接github，但是众所周知会出现网络问题，如果你能连上的话这里就忽略掉吧，连不上的可以按照下面的方法解决。<br>你需要把<strong>C:\Users\你的电脑用户名\AppData\Roaming\npm\node_modules\hexo-cli\lib\console\init.js</strong>里面的内容如下修改：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">本来是这样的：</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">GIT_REPO_URL</span> = <span class="string">&#x27;https://github.com/hexojs/hexo-starter.git&#x27;</span>;</span><br><span class="line">你得改成这样：</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">GIT_REPO_URL</span> = <span class="string">&#x27;https://github.com.cnpmjs.org/hexojs/hexo-starter.git&#x27;</span>;</span><br></pre></td></tr></table></figure></p></div><p>在hexo init之后你会发现你的文件夹里面变成了这样：<br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/post1/hexo1.png"><br>如果略有不同不用担心，我这个已经是部署之后的了，改了好些。<br>之后进浏览器输入<a href="localhost:4000">localhost:4000</a>，就可以看见默认的hexo静态网页了！<br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/post1/hexo2.png"></p><h2 id="本地配置git并和GitHub连上"><a href="#本地配置git并和GitHub连上" class="headerlink" title="本地配置git并和GitHub连上"></a>本地配置git并和GitHub连上</h2><p>之后你需要安装本地的git，如果你是Linux，那么只需要用你系统的包管理器安装即可，此处忽略，如果你是Windows，请去<a href="https://git-scm.com/">✨官方网页✨</a>下载安装，安装过程全部默认就行，并且同样的，你需要把git给放到环境变量里面。</p><p>但是众所周知，我们网络是十分安全滴，所以你需要设置好ssh来连接。<br>进入git的命令行（git bash），输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">&#x27;你GitHub注册用的邮箱地址&#x27;</span></span><br></pre></td></tr></table></figure><p>这个时候你C盘用户文件夹里面.ssh文件夹中就多了<strong>id_rsa</strong>和<strong>id_rsa.pub</strong>这两个文件了，双击用记事本（或者vscode之类的编辑器）打开<strong>id_rsa.pub</strong>复制里面的key。</p><p>之后进入GitHub网页，右上角头像点开，选择settings：<br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/post1/git1.png"><br>点击SSH and GPG keys，选择New SSH key：<br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/post1/git2.png"><br>之后把你剪贴板复制到key里面就行，名字填任何什么都行。</p><p>最后我们验证+绑定一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">$ git config --global user.name <span class="string">&quot;注册时用户名&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;注册时邮箱&quot;</span></span><br></pre></td></tr></table></figure><h2 id="远程部署hexo"><a href="#远程部署hexo" class="headerlink" title="远程部署hexo"></a>远程部署hexo</h2><p>回到你的hexo本地目录，编辑<strong>一个叫做_config.yml</strong>的文件，拉到最下面deploy一项，如下修改：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/你的用户名/你的用户名.GitHub.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>修改后即可部署，一般来说你还需要安装一个工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><p>之后就可以三件套（清理、生成、部署）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>耐心等待几分钟之后，你就可以在<strong>你的用户名.github.io</strong>看见你的网站辣！</p><h2 id="设置dns解析"><a href="#设置dns解析" class="headerlink" title="设置dns解析"></a>设置dns解析</h2><p>在你的域名提供商那里找到dns解析一项，博主此处以阿里云的万网为例：<br>我们需要添加一条CNAME记录，从而将一个域名解析到另一个域名。<br><img src="https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/post1/dns1.png"></p><p>之后在你的本地hexo文件夹里面的source里面新建一个<strong>文件</strong>，名字叫做<strong>CNAME</strong>，无后缀，内容填写为你的域名，比如我的域名是<em>buaa.spotterblog.cn</em>，只需要写进去保存即可，我在此处用的是二级域名，如果你是顶级域名的话也一样写进去即可。</p><p>之后再次三件套就好啦！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>为了更完美一些，回到你的repo的设置，点到pages里面，我们会发现Custom domain已经变成了我们CNAME这个文件中写的内容了，我们勾选上下方的<strong>Enforce HTTPS</strong>即可，GitHub会为我们的域名自动申请并安装SSL证书，我们就可以用HTTPS安全的访问我们的博客了！</p><h1 id="折腾总结"><a href="#折腾总结" class="headerlink" title="折腾总结"></a>折腾总结</h1><p>我们弄好了本地HEXO与git，并且部署到GitHub，利用GitHub Pages托管了我们的网页，同时把自己的域名解析到了GitHub的给我们的域名上，实现了用自己的域名访问。</p><h1 id="一些附加内容"><a href="#一些附加内容" class="headerlink" title="一些附加内容"></a>一些附加内容</h1><p>由于GitHub Pages访问慢，我们可以把图片挂到各类OSS上，博客文章直接引用外链即可，并且利用CDN来实现加速访问，同时Cloudflare也能实现内地的加速。</p>]]></content>
      
      
      <categories>
          
          <category> 折腾笔记 </category>
          
          <category> 网页 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GithubPages </tag>
            
            <tag> SSL </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
