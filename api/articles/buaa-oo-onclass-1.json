{"title":"北航面向对象-课堂展示1-表达式展开","uid":"cf965da50ced175d6641a9c8fe95294c","slug":"buaa-oo-onclass-1","date":"2025-03-02T16:00:00.000Z","updated":"2025-03-03T08:16:14.687Z","comments":true,"path":"api/articles/buaa-oo-onclass-1.json","keywords":null,"cover":"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-oo1/oocover.jpeg","content":"<h1 id=\"U1-表达式展开心得分享\"><a href=\"#U1-表达式展开心得分享\" class=\"headerlink\" title=\"U1-表达式展开心得分享\"></a>U1-表达式展开心得分享</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>历经了<strong>三次</strong>重构（自己折腾自己）之后也算是对于展开表达式有了深刻的理解，希望我的这些内容能够给予同学们一些启发，写出更加优雅的代码</p></blockquote>\n<h2 id=\"题目重述\"><a href=\"#题目重述\" class=\"headerlink\" title=\"题目重述\"></a>题目重述</h2><p>和之前我分析的大同小异，如下：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>给你一个表达式，一个表达式可以包含一个或者多个项，一个项可以包含多个因子。</p>\n<p>表达式内的项用加减号连接</p>\n<p>项内的因子用乘号连接</p>\n<p>因子为指数形式，底数可以为带符号整数、<code>x</code>或者一个表达式（用括号包起来），幂次仅能为非负的带符号整数。</p>\n<p>要求化简表达式为不含括号的形式。</p></blockquote>\n<p>以上描述可以较为清晰简洁的重述出题目的框架，部分细节已经省略，需要注意的是表达式里面可能包含空白字符、表达式前可以加上<strong>一个</strong>符号，项的前面可以加上<strong>一个</strong>符号。</p>\n<p>不难看出，由于禁止了递归括号的出现，此处递归下降的深度是非常有限的，最大的情况为<code>表达式-项-因子-(表达式-项-因子)</code>。由于目前词法较为简单，大部分因子都能够直接换算为多项式，因此不再继续展开。</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><h3 id=\"前置知识：BNF\"><a href=\"#前置知识：BNF\" class=\"headerlink\" title=\"前置知识：BNF\"></a>前置知识：BNF</h3><p>了解巴克斯范式之前，我们先快速过一下什么是<strong>正则语言</strong>，你们可能在离散数学里面学过这个概念，他的特点就是：</p>\n<ul>\n<li>封闭性<ul>\n<li>交并补运算、闭包运算后依然是正则语言</li>\n<li>两个正则语言连接之后还是正则语言</li>\n<li>商、转置、代换还是正则语言</li>\n</ul>\n</li>\n<li>任何正则语言都是上下文无关语言   <strong>重点</strong></li>\n</ul>\n<p>那上下文无关语言又是什么呢？其定义是：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>可以用上下文无关文法定义的形式语言。</p>\n<p>上下文无关文法是一种形式文法，由非终结符集合、终结符集合、产生式集合以及起始符组成。</p></blockquote>\n<p>煮啵煮啵，你说的这个文法确实很厉害，有没有更加厉害的文法呢？</p>\n<p>有的兄弟，有的，这样的文法我们还要好多个（x），其中就包含我们解析表达式会用到的BNF。</p>\n<p>举例来说，我们希望用BNF生成一个数字加上数字的表达式，那么大致如下：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">&lt;add&gt;::=&lt;number&gt;+&lt;number&gt;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&lt;number&gt;::=&lt;sign&gt;|&lt;integer&gt;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&lt;integer&gt;::=&lt;digit&gt;|&lt;digit&gt;&lt;integer&gt;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&lt;digit&gt;::=0|1|2|3|4|5|6|7|8|9</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&lt;sign&gt;::=+|-</span></span></code></pre></div><p>其中尖括号代表非终结符，而这里面的终结符就是<code>+</code>和<code>-</code>以及那十个数字。比如这个时候我希望判断<code>57+85</code>是不是一个符合规则的表达式，语法解析树如下：</p>\n<p><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-oo-class1/1.png\"></p>\n<p>我们从上往下就能看出，BNF是递归的，构成整数的digit也是一个整数，而且我们从上至下逐渐把一个大的表达式逐步下降成一系列组成部分。</p>\n<p>而且最好玩的是，除了这个语法解析树，BNF还能够用语法图的形式来描述，比如我们上文的<code>&lt;digit&gt;::=0|1|2|3|4|5|6|7|8|9</code>就可以化成下图：</p>\n<p><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-oo-class1/2.png\"></p>\n<p>至于我为什么会讲到这个，这是待会会用到的米奇妙妙工具~</p>\n<h3 id=\"词法、语法分析器做法\"><a href=\"#词法、语法分析器做法\" class=\"headerlink\" title=\"词法、语法分析器做法\"></a>词法、语法分析器做法</h3><h4 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h4><p>也算是最正统的做法之一了吧，这也是我后两次重构的做法了，题目描述的形式化表述我们再看一下：</p>\n<p><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-oo-class1/3.jpg\"></p>\n<p>是不是很熟悉，还记得我们上文的BNF语法吗，其实这个就是一个比较标准的语法描述，其中字面量就是我们之前说的终止符，其他的就是非终止符，这里一片都是生成式。</p>\n<p>需要特别提到的是，上下文无关语法可能会存在歧义，举例来说：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>The girl touch the boy with a flower.</p></blockquote>\n<p>这句话有两个意思：</p>\n<ol>\n<li>女孩用花去触碰了那个男孩。<ul>\n<li>无论怎么看都是很温馨的一句话对吧</li>\n</ul>\n</li>\n<li>女孩碰了一下那个拿着花的男孩。<ul>\n<li>似乎就没有很多感情色彩了</li>\n</ul>\n</li>\n</ol>\n<p>这样的例子还有很多，比如我们不设定什么是括号、优先级的时候，<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.122ex\" height=\"1.505ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -583 4031.9 665\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(751.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1751.4,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2502.7,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3502.9,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g></g></g></g></svg></mjx-container>的语法分析树就存在两种情况：</p>\n<p><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-oo-class1/4.png\"></p>\n<p>这样就产生了歧义，本质上来看就是不同生成树生成了同一个式子。不过我们设定好括号以及运算优先级之后歧义就消失了，也就是我们除了BNF语法还定义了一系列规则避免歧义的产生。</p>\n<p>至此，我们也可以大致描述出我们的语法了，题目分析就到这里。</p>\n<h4 id=\"词法分析\"><a href=\"#词法分析\" class=\"headerlink\" title=\"词法分析\"></a>词法分析</h4><p>考虑到表达式的复杂程度，我们为了简化后续语法分析的难度，我们讲输入的字符串处理为一个由Token组成的数组，也就是我们常说的词法分析。</p>\n<p>我们计划用<code>ADD, SUB, MUL, POW, NUM, VAR, LB, RB, END</code>来作为单词的种类，比如<code>1145141919810+x</code>可以被分析为<code>NUM ADD VAR END</code>，更复杂的也是同理，这样分析之后就把抽象的字符串转换为了便于编程的token了。</p>\n<p>词法分析也是各个编译器都会做的一件事情，一个好的词法分析是非常关键的，比如我们来看一个c++的经典老bug：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">vector</span><span style=\"color: #F92672\">&lt;</span><span style=\"color: #F8F8F2\">vector</span><span style=\"color: #F92672\">&lt;</span><span style=\"color: #66D9EF; font-style: italic\">int</span><span style=\"color: #F92672\">&gt;&gt;</span><span style=\"color: #F8F8F2\">;</span><span style=\"color: #88846F\">    // （某些编译器）报错</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">vector</span><span style=\"color: #F92672\">&lt;</span><span style=\"color: #F8F8F2\">vector</span><span style=\"color: #F92672\">&lt;</span><span style=\"color: #66D9EF; font-style: italic\">int</span><span style=\"color: #F92672\">&gt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #F92672\">&gt;</span><span style=\"color: #F8F8F2\">;</span><span style=\"color: #88846F\">   // 没问题，不报错</span></span></code></pre></div><p>一些编译器会在词法分析的时候把<code>&gt;&gt;</code>当作输入输出流的符号来匹配，导致了编译错误。</p>\n<p>回到我们这道题：关于<code>x^+1</code>作词法分析的时候也会出现类似的问题，解析成<code>VAR POW ADD NUM</code>明显会被加号拆成单独的两个项，但是考虑到我们用的都是包含符号的数字，那么我们进行特判解析成<code>VAR POW NUM</code>即可，其中NUM的内容是<code>\"+1\"</code>而不是<code>\"1\"</code>。</p>\n<p>当然还有一些更小的细节，取决于你具体的实现，这里就不再赘述了。</p>\n<h4 id=\"语法分析与递归下降\"><a href=\"#语法分析与递归下降\" class=\"headerlink\" title=\"语法分析与递归下降\"></a>语法分析与递归下降</h4><p>我们之前铺垫那么多就为了讲这个递归下降，不过显然，也算呼之欲出了。</p>\n<p>递归应该不需要我们多讲了，而上文我们提到了BNF的语法解析树，从上至下有很多层次，我们在拆解一个表达式的过程之中就是从上到下来进行<strong>下降</strong>的操作。那么我们解析也就主要是匹配+递归来解决，递归调用非终结符，匹配终结符。</p>\n<p>考虑到需要最后输出化简后的式子，易见最终结果一定是一个多项式，那么我们实现的语法分析器调用函数的返回值就可以设置为多项式，这样便于一层一层的回溯并且计算。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F92672\">class</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #A6E22E; text-decoration: underline\">Parser</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #88846F\">/*</span></span>\n<span class=\"line\"><span style=\"color: #88846F\">    略掉一些细节</span></span>\n<span class=\"line\"><span style=\"color: #88846F\">    */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #66D9EF; font-style: italic\">Polynomial</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #A6E22E\">simplifyExpr</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #66D9EF; font-style: italic\">Lexer</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FD971F; font-style: italic\">lexer</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #66D9EF; font-style: italic\">Polynomial</span><span style=\"color: #F8F8F2\"> result </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #F92672\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #A6E22E\">Polynomial</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #88846F\">//   ...</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        result.</span><span style=\"color: #A6E22E\">add</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #A6E22E\">simplifyTerm</span><span style=\"color: #F8F8F2\">(newLexer));</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #88846F\">//   ...</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #F92672\">return</span><span style=\"color: #F8F8F2\"> result;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #66D9EF; font-style: italic\">Polynomial</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #A6E22E\">simplifyTerm</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #66D9EF; font-style: italic\">Lexer</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FD971F; font-style: italic\">lexer</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #66D9EF; font-style: italic\">Polynomial</span><span style=\"color: #F8F8F2\"> result </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #F92672\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #A6E22E\">Polynomial</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #88846F\">//   ...</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        result.</span><span style=\"color: #A6E22E\">add</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #A6E22E\">simplifyFactor</span><span style=\"color: #F8F8F2\">(newLexer));</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #88846F\">//   ...</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #F92672\">return</span><span style=\"color: #F8F8F2\"> result;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #66D9EF; font-style: italic\">Polynomial</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #A6E22E\">simplifyFactor</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #66D9EF; font-style: italic\">Lexer</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FD971F; font-style: italic\">lexer</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #66D9EF; font-style: italic\">Polynomial</span><span style=\"color: #F8F8F2\"> result </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #F92672\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #A6E22E\">Polynomial</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #88846F\">//   ...</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        result.</span><span style=\"color: #A6E22E\">add</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #A6E22E\">simplifyExpr</span><span style=\"color: #F8F8F2\">(newLexer));</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #88846F\">//   ...</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        result.</span><span style=\"color: #A6E22E\">add</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #F92672\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #A6E22E\">Polynomial</span><span style=\"color: #F8F8F2\">(expoent, value));</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #88846F\">//   ...</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #F92672\">return</span><span style=\"color: #F8F8F2\"> result;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><p>以上便是递归下降的大致框架，从大结构拆成小结构，大结构里面递归调用小结构。</p>\n<h3 id=\"正则表达式做法\"><a href=\"#正则表达式做法\" class=\"headerlink\" title=\"正则表达式做法\"></a>正则表达式做法</h3><p>这里必须提前说明，正则表达式的解析分为递归和非递归的，java的正则解析引擎不支持递归，因此这种做法很可能在后续不适用，但是考虑到正则表达式和BNF的相似性，我还是想要在正规做法之后补充说明一下这个做法。</p>\n<p>多一嘴：至于为什么不行，我们举例来说，对于一个多重嵌套括号的表达式来说，左右括号必须匹配，但是我们并不能确定有多少层嵌套，那么作为有限状态机的正则语言来说是不能描述不确定数量的嵌套的，换句话来说，这种语言是上下文无关语言，但不是正则语言。</p>\n<h4 id=\"正则表达式实现语法分析\"><a href=\"#正则表达式实现语法分析\" class=\"headerlink\" title=\"正则表达式实现语法分析\"></a>正则表达式实现语法分析</h4><p>我们在进行正则解析的时候，考虑到词法分析并不能解决语法分析的难度于是干脆省略，还记得我们之前提到过的<strong>语法图</strong>吗，对了，对于正则语言这个上下文无关语言的子集来说是可以用这种语法图表示的，那么我们主要有难度的就在于如下两个：</p>\n<ol>\n<li><p>表达式-&gt;项：<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-oo1/1.PNG\"></p>\n</li>\n<li><p>项-&gt;因子<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-oo1/2.PNG\"></p>\n</li>\n</ol>\n<p>是不是很熟悉，具体解析可以直接看图得出，由于（我们目前第一次作业）是正则语言，所以一定可以用正则表达式来解析，我们可以依此写出一个好的表达式，作为切分，之后的步骤依旧和递归下降一模一样，毕竟我们只是用正则表达式进行了语法分析而已。</p>\n<h2 id=\"评测机构造思路\"><a href=\"#评测机构造思路\" class=\"headerlink\" title=\"评测机构造思路\"></a>评测机构造思路</h2><p>还记得我们之前的语法分析树吗，对于一个上下文无关语言来说，我们可以从下至上来构建一个符合规则的表达式。</p>\n<p>我们可以提前设定好解析的深度，深度为1的时候就是简单因子构成，因子由于确实简单，我就采取了随机的方式来生成不同种类的因子，并且考虑表达式因子的存在，加上一个递归的生成即可。</p>\n<div class=\"language-python\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">python</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">factor_list </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> [] </span><span style=\"color: #88846F\"># 略</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #66D9EF; font-style: italic\">def</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #A6E22E\">gen_factor</span><span style=\"color: #F8F8F2\">():</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    f1 </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> random.choice()</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">if</span><span style=\"color: #F8F8F2\"> f1 </span><span style=\"color: #F92672\">!=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E6DB74\">\"expr\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #F92672\">and</span><span style=\"color: #F8F8F2\"> f1 </span><span style=\"color: #F92672\">!=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E6DB74\">\"exprpow\"</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #F92672\">return</span><span style=\"color: #F8F8F2\"> f1</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">elif</span><span style=\"color: #F8F8F2\"> f1 </span><span style=\"color: #F92672\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E6DB74\">\"expr\"</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #F92672\">return</span><span style=\"color: #F8F8F2\"> gen_expr()</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">else</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #F92672\">return</span><span style=\"color: #F8F8F2\"> gen_expr() </span><span style=\"color: #F92672\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E6DB74\">\"^\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #F92672\">+</span><span style=\"color: #F8F8F2\"> random.randint(</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">,</span><span style=\"color: #AE81FF\">8</span><span style=\"color: #F8F8F2\">)</span></span></code></pre></div><p>以上只是一个例子，实际操作中你可以添加很多空格或者符号来进行更复杂的生成。</p>\n<p>深度大于1的时候，我们就随机取当前拥有的元素<strong>能够</strong>组成的生成式来生成更复杂的表达式。</p>\n<p>实际操作过程中深度不需要太深，数据量足够大就行，毕竟互测的时候有cost限制的。</p>\n<h2 id=\"重构代码的经验\"><a href=\"#重构代码的经验\" class=\"headerlink\" title=\"重构代码的经验\"></a>重构代码的经验</h2><p>经历了三次重构之后，对于重构的理解和操作有了一些理解，也在此作为一个bonus内容分享一些。</p>\n<h3 id=\"优先指定代码框架\"><a href=\"#优先指定代码框架\" class=\"headerlink\" title=\"优先指定代码框架\"></a>优先指定代码框架</h3><p>什么是代码的框架，我个人的理解就是你得计划好抽象出多少个类，之后要考虑这些类的继承关系以及相互之间都有什么调用的关系，比如对于这次作业包含一个主类，几个数据类（多项式、三角函数等），还有语法和词法分析器各一个类，在这样的情况下比如我们可以把数据类所具备的特征提取一下，整理出一个父类，之后让数据的类继承等等，在脑海里面大致找到代码该如何架构，这样后续编写代码的时候才会更加顺利。</p>\n<p>举个例子，对于数据的类总有一些特点，比如得进行加减法吧，得有数据的内容吧，那么父类里面就应该体现这些，并且总结为同一个结构，以供继承，这样也能够减少一部分代码量，有助于写出优美的代码，更重要的是层次结构更加清晰。</p>\n<h3 id=\"其次关注核心实现\"><a href=\"#其次关注核心实现\" class=\"headerlink\" title=\"其次关注核心实现\"></a>其次关注核心实现</h3><p>这次作业核心实现就是递归下降，那么我们就得考虑好递归下降的结构，我在上文提出了一个大致的架构，可以看出这个架构无论如何重构都是大同小异的，那么我们就可以考虑在重构的时候别完完全全都把最早的代码给修改掉，我们可以提取有用的内容或者框架来继续使用。</p>\n<h3 id=\"细节尽可能少\"><a href=\"#细节尽可能少\" class=\"headerlink\" title=\"细节尽可能少\"></a>细节尽可能少</h3><p>为什么这么说呢，那我们debug的时候不都是细节吗？我个人认为许多细节能够在各种通用的情况下来解决，比如带符号的整数导致的多个加减号重叠的问题，我们当然可以利用直接删除多余的符号来解决，但是这样并不是一种很好的解决方法，因为这个过程中你考虑了细节并且单独处理了，这样加大了代码量，同时也不会照顾到其他类似的细节，比如项的前面也会有正负号。</p>\n<p>我们要做的是考虑所有这些可能会有的问题，在实现部分尽可能地用一个通用的方法解决尽可能多的细节，也就是我所说的尽可能少一些细节，因为细节也是具有一定的同质性的，提前发现远比后去解决更加优雅与可靠</p>\n<h3 id=\"参考一些成熟的框架\"><a href=\"#参考一些成熟的框架\" class=\"headerlink\" title=\"参考一些成熟的框架\"></a>参考一些成熟的框架</h3><p>作为面向对象的新手，我们肯定是不能一开始就写出特别好的代码，每个人都是从模仿开始学习，我参照了去年oopre的第七次作业的代码作为基础，以一个助教团队提供的优秀架构来进行二次开发显然是比自己单打独斗更加明智的选择。对于以后的其他问题也是一样的，一个好的成熟的框架结构是非常适合我们重构的时候参考的。</p>\n<p>最后预祝各位同学第二次作业顺利！♥♥♥♥♥</p>\n","feature":true,"text":"课上展示相关BNF、递归下降、正则表达式的内容...","permalink":"/post/buaa-oo-onclass-1","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"北航面向对象","slug":"北航面向对象","count":2,"path":"api/categories/北航面向对象.json"},{"name":"学习笔记","slug":"北航面向对象/学习笔记","count":2,"path":"api/categories/北航面向对象/学习笔记.json"}],"tags":[{"name":"面向对象","slug":"面向对象","count":2,"path":"api/tags/面向对象.json"},{"name":"表达式","slug":"表达式","count":2,"path":"api/tags/表达式.json"},{"name":"递归下降","slug":"递归下降","count":2,"path":"api/tags/递归下降.json"},{"name":"正则表达式","slug":"正则表达式","count":1,"path":"api/tags/正则表达式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#U1-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%B1%95%E5%BC%80%E5%BF%83%E5%BE%97%E5%88%86%E4%BA%AB\"><span class=\"toc-text\">U1-表达式展开心得分享</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E9%87%8D%E8%BF%B0\"><span class=\"toc-text\">题目重述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">具体实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%EF%BC%9ABNF\"><span class=\"toc-text\">前置知识：BNF</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%8D%E6%B3%95%E3%80%81%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E5%81%9A%E6%B3%95\"><span class=\"toc-text\">词法、语法分析器做法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90\"><span class=\"toc-text\">题目分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90\"><span class=\"toc-text\">词法分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D\"><span class=\"toc-text\">语法分析与递归下降</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%81%9A%E6%B3%95\"><span class=\"toc-text\">正则表达式做法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AE%9E%E7%8E%B0%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90\"><span class=\"toc-text\">正则表达式实现语法分析</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%84%E6%B5%8B%E6%9C%BA%E6%9E%84%E9%80%A0%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">评测机构造思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%87%8D%E6%9E%84%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BB%8F%E9%AA%8C\"><span class=\"toc-text\">重构代码的经验</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%85%88%E6%8C%87%E5%AE%9A%E4%BB%A3%E7%A0%81%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">优先指定代码框架</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E6%AC%A1%E5%85%B3%E6%B3%A8%E6%A0%B8%E5%BF%83%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">其次关注核心实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%86%E8%8A%82%E5%B0%BD%E5%8F%AF%E8%83%BD%E5%B0%91\"><span class=\"toc-text\">细节尽可能少</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E4%B8%80%E4%BA%9B%E6%88%90%E7%86%9F%E7%9A%84%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">参考一些成熟的框架</span></a></li></ol></li></ol></li></ol>","author":{"name":"大仓鼠","slug":"blog-author","avatar":"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/%E7%BD%91%E7%AB%99%E7%B4%A0%E6%9D%90%E5%9B%BE%E7%89%87/%E5%A4%B4%E5%83%8Flogo/head.jpg","link":"/","description":"我的博客（隐藏版）","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"折腾笔记-hexo、Mathjax、Latex的奇妙bug","uid":"106042df361711128e93d1695c28edbf","slug":"hexo-mathjax","date":"2024-07-28T16:00:00.000Z","updated":"2024-07-29T11:38:33.576Z","comments":true,"path":"api/articles/hexo-mathjax.json","keywords":null,"cover":"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/post2/mj1.png","text":"hexo写Latex需要换行的时候经常会遇上问题，结果罪魁祸首是转义字符。...","permalink":"/post/hexo-mathjax","photos":[],"count_time":{"symbolsCount":768,"symbolsTime":"1 mins."},"categories":[{"name":"折腾笔记","slug":"折腾笔记","count":2,"path":"api/categories/折腾笔记.json"},{"name":"网页","slug":"折腾笔记/网页","count":2,"path":"api/categories/折腾笔记/网页.json"}],"tags":[{"name":"hexo","slug":"hexo","count":1,"path":"api/tags/hexo.json"},{"name":"Mathjax","slug":"Mathjax","count":1,"path":"api/tags/Mathjax.json"},{"name":"Latex","slug":"Latex","count":1,"path":"api/tags/Latex.json"}],"author":{"name":"大仓鼠","slug":"blog-author","avatar":"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/%E7%BD%91%E7%AB%99%E7%B4%A0%E6%9D%90%E5%9B%BE%E7%89%87/%E5%A4%B4%E5%83%8Flogo/head.jpg","link":"/","description":"我的博客（隐藏版）","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}