{"title":"北航计组-预习5-机器语言1","uid":"8a3d05455b8690208682c71c22ab04dc","slug":"buaa-co-pre-5","date":"2024-07-29T16:00:00.000Z","updated":"2024-08-06T08:51:49.929Z","comments":true,"path":"api/articles/buaa-co-pre-5.json","keywords":null,"cover":"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co1.jpg?x-oss-process=image/resize,w_600","content":"<h1 id=\"机器语言1\"><a href=\"#机器语言1\" class=\"headerlink\" title=\"机器语言1\"></a>机器语言1</h1><h2 id=\"机器语言概述\"><a href=\"#机器语言概述\" class=\"headerlink\" title=\"机器语言概述\"></a>机器语言概述</h2><h3 id=\"从代码到运行\"><a href=\"#从代码到运行\" class=\"headerlink\" title=\"从代码到运行\"></a>从代码到运行</h3><p>主要分为五个步骤：编译-汇编-存储-加载-运行。也就是从程序编译成汇编程序，再从汇编变成机器码，之后存到硬盘内，加载到主存储器中，最后交给CPU运行。<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os5/co1.png\" alt=\"gaishu\"></p>\n<h4 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h4><p>编译器把高级语言（比如C语言）转化为汇编代码的过程。</p>\n<ul>\n<li>高级语言：适合人类书写和阅读</li>\n<li>汇编代码：稍微接近CPU理解和执行的语言（<strong>但是并非直接理解</strong>）</li>\n</ul>\n<p>通过编译可以把像这样的c语言代码：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F92672\">while</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #AE81FF\">1</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">if</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #F92672\">*</span><span style=\"color: #F8F8F2\">p){</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #F92672\">*</span><span style=\"color: #F8F8F2\">q </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #F92672\">*</span><span style=\"color: #F8F8F2\">p;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        p</span><span style=\"color: #F92672\">++</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        q</span><span style=\"color: #F92672\">++</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">else</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #F92672\">break</span><span style=\"color: #F8F8F2\">;</span></span></code></pre></div><p>翻译成这样的汇编代码：</p>\n<div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #A6E22E\">Loop_Start:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    lbu     $t1, </span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">($s1)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    sb      $t1, </span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">($s2)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    addiu   $s1, $s1, </span><span style=\"color: #AE81FF\">1</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    addiu   $s2, $s2, </span><span style=\"color: #AE81FF\">1</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    beq     $t1, </span><span style=\"color: #AE81FF\">$0</span><span style=\"color: #F8F8F2\">, Loop_End</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    j       Loop_Start</span></span>\n<span class=\"line\"><span style=\"color: #A6E22E\">Loop_End:</span></span></code></pre></div><h4 id=\"汇编\"><a href=\"#汇编\" class=\"headerlink\" title=\"汇编\"></a>汇编</h4><p>为了让CPU运行程序，还需要一次将汇编代码转换成机器码（也就是0101的串）的转换。区别如下：</p>\n<ul>\n<li>汇编程序：每行都是一条机器指令</li>\n<li>机器指令：由一组二进制01串组成，是CPU可以理解与执行的。</li>\n</ul>\n<h4 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h4><p>C程序被编译为一组CPU指令后，就以文件方式被存储在硬盘中，其实就是<strong>二进制</strong>存储的。</p>\n<h4 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h4><p>从硬盘<em>读盘</em>到内存里面，也就是主存储器，加载过程中指令和数据分开载入，分别在内存中的不同位置：</p>\n<ul>\n<li>代码段：存储CPU指令</li>\n<li>数据段：存储数据</li>\n</ul>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><p>CPU运行程序无非就是如下的一个循环：</p>\n<ol>\n<li>读取指令：从内存代码段读取一条指令</li>\n<li>分析指令：分析指令功能</li>\n<li>执行指令：控制内部功能并执行操作</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>对于RISC来说，只有读写主存的指令能够传输数据，下文会提到</p></blockquote>\n<h3 id=\"指令集\"><a href=\"#指令集\" class=\"headerlink\" title=\"指令集\"></a>指令集</h3><p>如果说指令是CPU懂的<strong>单词</strong>，那么指令集<em>ISA</em>就是CPU理解的<strong>全部单词的集合</strong></p>\n<ul>\n<li>如果只有一种ISA：可以很好的利用公共软件，如编译器、操作系统等</li>\n<li>如果有很多种不同的：不同的指令集有不同的设计平衡性考虑，有更适用的ISA</li>\n</ul>\n<h3 id=\"RISC\"><a href=\"#RISC\" class=\"headerlink\" title=\"RISC\"></a>RISC</h3><p>Reduced Instruction Set Computing (RISC)</p>\n<ul>\n<li>加速大概率事件</li>\n<li>便于设计，电路频率更高</li>\n<li>简单功能交给硬件，复杂功能交给软件</li>\n</ul>\n<h4 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h4><ul>\n<li>指导思想：CPU越简单性能越高</li>\n<li>设计目标：减少指令数量，去除复杂指令</li>\n<li>基本策略：<ul>\n<li>指令定长：所有指令都占用32位（1个字），降低了从存储器中读取指令的复杂度</li>\n<li>简化指令寻址模式：以基地址+偏移为主，降低了从主存中读取操作数的复杂度</li>\n<li>ISA的指令不仅数量少，而且简单，降低了指令执行的复杂度</li>\n<li>只有load与store两类指令能够<strong>访存</strong></li>\n<li>把复杂留给编译，即编译器将高层语言复杂语句转换为若干简单的汇编指令</li>\n</ul>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我们选择学习MIPS是因为MIPS是RISC的典型代表，并且是真正的工业CPU</p></blockquote>\n<h2 id=\"寄存器\"><a href=\"#寄存器\" class=\"headerlink\" title=\"寄存器\"></a>寄存器</h2><h3 id=\"计算机硬件的操作数\"><a href=\"#计算机硬件的操作数\" class=\"headerlink\" title=\"计算机硬件的操作数\"></a>计算机硬件的操作数</h3><p>对于c语言来说，变量的数量上限只被内存大小卡了，而且我们一般不考虑内存限制<del>（除非是打acm……）</del><br>对于<strong>ISA</strong>来说，有一组数量有限的而且一般是固定的操作数，叫做<strong>寄存器</strong>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>小声bb：我姑且把寄存器理解成某种存数字的变量，后面有问题再回来改</p></blockquote>\n<ul>\n<li>寄存器内置于CPU，因此访问速度很快（&lt;1ns)</li>\n<li>寄存器也因此数量少</li>\n</ul>\n<h3 id=\"计算机中的时间单位\"><a href=\"#计算机中的时间单位\" class=\"headerlink\" title=\"计算机中的时间单位\"></a>计算机中的时间单位</h3><table>\n<thead>\n<tr>\n<th align=\"center\">时间单位</th>\n<th align=\"center\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.048ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1347 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(878,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g></g></svg></mjx-container></th>\n<th align=\"center\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.489ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.425ex\" height=\"1.489ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1072 658\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D707\" d=\"M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(603,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g></g></svg></mjx-container></th>\n<th align=\"center\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.419ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1069 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(600,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g></g></svg></mjx-container></th>\n<th align=\"center\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.199ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 972 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(503,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g></g></svg></mjx-container></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">全称</td>\n<td align=\"center\">millisecond</td>\n<td align=\"center\">microsecond</td>\n<td align=\"center\">nanosecond</td>\n<td align=\"center\">picosecond</td>\n</tr>\n<tr>\n<td align=\"center\">中文名</td>\n<td align=\"center\">毫秒</td>\n<td align=\"center\">微妙</td>\n<td align=\"center\">纳秒</td>\n<td align=\"center\">皮秒</td>\n</tr>\n<tr>\n<td align=\"center\">换算</td>\n<td align=\"center\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.507ex\" height=\"2.139ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -863.3 5086.1 945.3\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(500,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1246.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2302.6,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(3739.1,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4617.1,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g></g></svg></mjx-container></td>\n<td align=\"center\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.489ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"10.885ex\" height=\"2.443ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -864 4811.1 1080\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(500,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1246.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2302.6,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(3739.1,0)\"><path data-c=\"1D707\" d=\"M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4342.1,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g></g></svg></mjx-container></td>\n<td align=\"center\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"10.878ex\" height=\"2.14ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -864 4808.1 946\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(500,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1246.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2302.6,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(3739.1,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4339.1,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g></g></svg></mjx-container></td>\n<td align=\"center\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.459ex\" height=\"2.394ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -864 5064.7 1058\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(500,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1246.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2302.6,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mi\" transform=\"translate(4092.7,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4595.7,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g></g></svg></mjx-container></td>\n</tr>\n<tr>\n<td align=\"center\">频率等级</td>\n<td align=\"center\">KHz（千）</td>\n<td align=\"center\">MHz（兆）</td>\n<td align=\"center\">GHz（吉）</td>\n<td align=\"center\">THz（太）</td>\n</tr>\n</tbody></table>\n<h3 id=\"MIPS的寄存器\"><a href=\"#MIPS的寄存器\" class=\"headerlink\" title=\"MIPS的寄存器\"></a>MIPS的寄存器</h3><p>有且仅有<strong>32</strong>个寄存器，每个的宽度都是<strong>32位</strong>。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">说明</p>\n<p>PPT原文说<em>寄存器没有类型（即无正负）</em>实际上不太对，因为寄存器中只是一个32位的串，具体怎么解释仅取决于指令，而非“无正负”</p>\n</div>\n<p>寄存器数量是均衡设计深思熟虑后的考虑：</p>\n<ul>\n<li>数量少：结构简单，速度快，能够存储在CPU内的数据少</li>\n<li>数量多：结构复杂，速度慢，能够存储在CPU内的数据多</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>思考题：64位太占空间，16位精度或者范围不够用</p></blockquote>\n<p>寄存器编号：0-31<br>寄存器的表示：<code>$x</code> 其中x为0到31的数字，即从<code>$0</code>到<code>$31</code><br>寄存器是有名字的：</p>\n<ul>\n<li>程序员变量寄存器一般用<code>$s0</code>到<code>$s7</code>命名，对应寄存器编号为<code>$16</code>到<code>$23</code></li>\n<li>临时变量寄存器是<code>$t0</code>到<code>$t7</code>（对应<code>$08</code>到<code>$15</code>），和<code>$t8</code>、<code>$t9</code>（对应<code>$24</code>和<code>$25</code>）</li>\n</ul>\n<p>这样可以稍微提高一点汇编代码的可读性……也许吧</p>\n<h2 id=\"指令和立即数\"><a href=\"#指令和立即数\" class=\"headerlink\" title=\"指令和立即数\"></a>指令和立即数</h2><h3 id=\"MIPS指令\"><a href=\"#MIPS指令\" class=\"headerlink\" title=\"MIPS指令\"></a>MIPS指令</h3><h4 id=\"指令格式\"><a href=\"#指令格式\" class=\"headerlink\" title=\"指令格式\"></a>指令格式</h4><div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">op dst, src1, src2</span></span></code></pre></div><p>其中：</p>\n<ul>\n<li>op：指令的功能</li>\n<li>dst：保存结果的寄存器</li>\n<li>src1：第一个操作数</li>\n<li>src2：第二个操作数</li>\n</ul>\n<p>如此，这种固定的格式既有助于人理解与编写，也可以使得硬件变得简单。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>硬件越简单，延迟越小，时钟频率越高。</p>\n</div>\n<h4 id=\"指令的特点\"><a href=\"#指令的特点\" class=\"headerlink\" title=\"指令的特点\"></a>指令的特点</h4><ul>\n<li>每条指令有且仅有一个操作</li>\n<li>每行有且仅有一个指令</li>\n<li>和C语言的运算紧密相关（其实这个该算C语言的特点了吧）</li>\n<li>一行C代码会对应多条指令</li>\n</ul>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p>假如有三个变量<code>a``b``c</code>分别存在三个寄存器<code>$s1``$s2``$s3</code>之中，以下c语言代码可以写成MIPS的汇编形式：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">a </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> b </span><span style=\"color: #F92672\">+</span><span style=\"color: #F8F8F2\"> c;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">a </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> b </span><span style=\"color: #F92672\">-</span><span style=\"color: #F8F8F2\"> c;</span></span></code></pre></div><div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F92672\">add</span><span style=\"color: #F8F8F2\"> $s1, $s2, $s3  </span><span style=\"color: #88846F\"> # a = b + c</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">sub</span><span style=\"color: #F8F8F2\"> $s1, $s2, $s3  </span><span style=\"color: #88846F\"> # a = b - c</span></span></code></pre></div><p>那如果一行c语言代码有多个运算呢？<del>那就得折磨编译器了</del><br>为了保证<strong>每行只有一条指令</strong>，一种对于<code>x = (a + b) - (c + d)</code>的可能实现如下：</p>\n<div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #88846F\"># 假设x,a,b,c,d分别对应s0-s4这五个寄存器</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">add</span><span style=\"color: #F8F8F2\"> $t1, $s1, $s2  </span><span style=\"color: #88846F\"> # t1 = a + b</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">add</span><span style=\"color: #F8F8F2\"> $t2, $s3, $s4  </span><span style=\"color: #88846F\"> # t2 = c + d</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">sub</span><span style=\"color: #F8F8F2\"> $s0, $t1, $t2  </span><span style=\"color: #88846F\"> # x = t1 - t2</span></span></code></pre></div><p>我们在这之中使用了两个临时变量寄存器。</p>\n<details class=\"custom-details\">\n<summary>欸！我也有一道自制的小题💡🤓👆</summary>\n<p>其实编译器能够做到的相比直接翻译代码来说会更多一些，你可以尝试一下不使用临时寄存器来把结果算出来。</p>\n</details>\n<h4 id=\"0号寄存器\"><a href=\"#0号寄存器\" class=\"headerlink\" title=\"0号寄存器\"></a>0号寄存器</h4><p>由于<del>成都人太多</del>数字<strong>0</strong>在程序中使用频率很高，为此MIPS专门为其分配了一个<strong>只读</strong>寄存器<code>$0</code>，或者用<code>$zero</code>表示，这个寄存器读出来一定是0，并且写入的数据<em>被丢弃</em>。</p>\n<p>比如我此时需要给变量c（存在<code>$s3</code>内）赋值为0，并且把b（存在<code>$s2</code>内）的值赋给a（存在<code>$s1</code>内）：</p>\n<div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F92672\">add</span><span style=\"color: #F8F8F2\"> $s3, </span><span style=\"color: #AE81FF\">$0</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #AE81FF\">$0</span><span style=\"color: #F8F8F2\">  </span><span style=\"color: #88846F\"> # c = 0</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">add</span><span style=\"color: #F8F8F2\"> $s1, $s2, </span><span style=\"color: #AE81FF\">$0</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #88846F\"> # a = b</span></span></code></pre></div><h3 id=\"立即数\"><a href=\"#立即数\" class=\"headerlink\" title=\"立即数\"></a>立即数</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>也许叫immediate number?</p></blockquote>\n<p>指令中的<strong>常量数值</strong>就是立即数，对于立即数来说，加法的汇编操作不太一样(<code>addi</code>)：</p>\n<div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #88846F\"># 语法是：op dst, src, imm 其中imm是立即数</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">addi $s1, $s2, </span><span style=\"color: #AE81FF\">5</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #88846F\"> # a = b + 5</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">addi $s3, $s3, </span><span style=\"color: #AE81FF\">1</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #88846F\"> # c++</span></span></code></pre></div><h2 id=\"数据传输指令\"><a href=\"#数据传输指令\" class=\"headerlink\" title=\"数据传输指令\"></a>数据传输指令</h2><p>这里的数据传输指的是<strong>寄存器</strong>与<strong>主存储器</strong>之间的数据交换。</p>\n<h3 id=\"主存单元\"><a href=\"#主存单元\" class=\"headerlink\" title=\"主存单元\"></a>主存单元</h3><h4 id=\"寄存器？主存？\"><a href=\"#寄存器？主存？\" class=\"headerlink\" title=\"寄存器？主存？\"></a>寄存器？主存？</h4><p>❌寄存器仅有32个，有限的寄存器存不完大量变量，比如<del>我写sb代码的时候10e8大数组</del>、高维矩阵等等……</p>\n<p>✔所以我们需要主存来解决问题，大部分变量存在主存中，需要用的时候<strong>加载</strong>到寄存器中。</p>\n<h4 id=\"主存的抽象模型\"><a href=\"#主存的抽象模型\" class=\"headerlink\" title=\"主存的抽象模型\"></a>主存的抽象模型</h4><p>主存可以被抽象成一个数组，其中存储数据单位为<strong>byte</strong>（记住了，这玩意是8bit，俩Hex），而存储数据位置就是地址，类似数组下标。</p>\n<p><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os5/co2.png\" alt=\"zhucun\"></p>\n<p>如图的4GB（这里的B是byte哈，不是bit）主存，有<strong>4G个存储单元</strong>，也就是<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"19.609ex\" height=\"1.581ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -677 8667.3 699\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(722.2,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1222.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(1000,0)\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(1500,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3444.7,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3944.9,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(1000,0)\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(1500,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6167.1,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(6667.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(1000,0)\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(1500,0)\"></path></g></g></g></svg></mjx-container>个存储单元。因此对应的地址为<code>0x00000000</code>到<code>0xFFFFFFFF</code>，地址位数为<strong>32位</strong>。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提醒</p>\n<p>注意区分地址的位数和存储的位数，此处地址位数是32位，但是一个存储单元里面只有1byte，也就是8位。</p>\n</div>\n<details class=\"custom-details\">\n<summary>CPU字长</summary>\n<p>cpu的字长指的是cpu<strong>一条指令</strong>可以计算的数据的宽度，比如MIPS字长32位，也就是单条MIPS可以计算的数据就是32位。<br>有人问那<code>long long</code>这种数据类型怎么实现的，别急，多条指令照样可以实现，但是这样也损失了一些性能罢了。</p>\n</details>\n<p>如同上文所述，我们一般把CPU抽象成一个二维数组，其中每一行的长度就是CPU字长。（这里仅是一种模拟而已，不要太当真）<br>那么<em>字地址</em>就是某字第0列的单元对应的字节的地址。<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os5/co3.png\" alt=\"cpu\"></p>\n<h3 id=\"地址的表示方式\"><a href=\"#地址的表示方式\" class=\"headerlink\" title=\"地址的表示方式\"></a>地址的表示方式</h3><h4 id=\"两种方法\"><a href=\"#两种方法\" class=\"headerlink\" title=\"两种方法\"></a>两种方法</h4><ol>\n<li>绝对地址：<ul>\n<li>主存单元的地址直接用具体数值表示</li>\n<li>比如下图中黄色单元地址为<code>P = 0xFFFFFFF9</code></li>\n</ul>\n</li>\n<li>相对地址：<ul>\n<li>采用“基地址+偏移”的形式表示</li>\n<li>比如以B1为基地址，那么P的地址就是<code>P = B1 + 1</code><br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os5/co4.png\" alt=\"loc\"></li>\n</ul>\n</li>\n</ol>\n<h4 id=\"基地址-偏移的优点\"><a href=\"#基地址-偏移的优点\" class=\"headerlink\" title=\"基地址+偏移的优点\"></a>基地址+偏移的优点</h4><ul>\n<li>一致：与数据结构的访问方式一致，比如<strong>数组</strong>就是基地址+偏移。</li>\n<li>统一：可以用固定base与不同的offset得到任意地址。</li>\n<li>灵活：不同的base和offset可以对应同一个地址，编程更加灵活。</li>\n</ul>\n<h3 id=\"数据传输指令-1\"><a href=\"#数据传输指令-1\" class=\"headerlink\" title=\"数据传输指令\"></a>数据传输指令</h3><h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">op reg, off(base)</span></span></code></pre></div><ul>\n<li>reg：写入或读出的寄存器</li>\n<li>base：存储基地址的寄存器（<strong>实际上base被视作无符号数</strong>）</li>\n<li>off：以byte为单位的偏移量，可正可负</li>\n</ul>\n<p>因此读写的存储单元的实际地址为<code>base + off</code></p>\n<h4 id=\"lw-sw指令\"><a href=\"#lw-sw指令\" class=\"headerlink\" title=\"lw/sw指令\"></a>lw/sw指令</h4><ul>\n<li>lw：Load Word<ul>\n<li>读取地址为<code>base + off</code>的一个<strong>字</strong>，然后写入reg</li>\n</ul>\n</li>\n<li>sw：Store Word<ul>\n<li>读取reg，写入<code>base + off</code></li>\n</ul>\n</li>\n</ul>\n<p>比如说我们需要汇编如下的c语言代码</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #66D9EF; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> A[</span><span style=\"color: #AE81FF\">100</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">A[</span><span style=\"color: #AE81FF\">10</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> A[</span><span style=\"color: #AE81FF\">3</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #F92672\">+</span><span style=\"color: #F8F8F2\"> a;</span></span></code></pre></div><p>假设指针<code>*A</code>存储的地址在寄存器<code>$s3</code>里面，而<code>a</code>变量<em>对应</em>寄存器<code>$s0</code>。<br>:::warning 一定要注意<br><code>A[10]</code>在c语言代表A数组的下标为10的位置的值，但是实际上这是一个<em>语法糖</em>，<code>A[10]</code>其实本质上是<code>*(A+10)</code>，其中<code>(A+10)</code>就是int类型指针变量<code>A</code>的内容（也就是一个地址）往后偏移10个int类型（或者其他类型）的长度后对应的地址，那么<code>*(A+10)</code>就是该地址对应的int（或其它类型）的指针指向的长度为int（或其它类型）的<strong>内容</strong>（也就是一个存到这里的数），这句话可能有点绕，但是多理解一下指针总是好事情不是吗？</p>\n<p>这个时候你去理解为什么<code>A[]</code>可以存在寄存器中就清楚多了，因为<code>A</code>本质上就是一个字长的无符号数（代表地址）（注意区分一下<code>*A</code>代表的才是这个地址内存的值，亦即<code>A[0]</code>），这个无符号数（地址）就是寄存器<code>$s3</code>的内容；同理变量<code>a</code>也有地址<code>&amp;a</code>，这个地址就是寄存器<code>$s0</code>的内容。<br>:::</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>因此我也喜欢把寄存器理解成对地址的操作。</p></blockquote>\n<p>闲话少说，我们通过<code>lw</code>和<code>sw</code>实现汇编如下：</p>\n<div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">lw $t0, </span><span style=\"color: #AE81FF\">12</span><span style=\"color: #F8F8F2\">($s3)    </span><span style=\"color: #88846F\"> # $t0 = A[3]</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">add</span><span style=\"color: #F8F8F2\"> $t0, $t0, $s0  </span><span style=\"color: #88846F\"> # $t0 = $t0 + a</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">sw $t0, </span><span style=\"color: #AE81FF\">40</span><span style=\"color: #F8F8F2\">($s3)    </span><span style=\"color: #88846F\"> # A[10] = $t0</span></span></code></pre></div><p>:::error 这样写不行<br>如下写法有误</p>\n<div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">lw $t0, </span><span style=\"color: #AE81FF\">12</span><span style=\"color: #F8F8F2\">($s3) </span></span>\n<span class=\"line\"><span style=\"color: #F92672\">add</span><span style=\"color: #F8F8F2\"> $t0, $t0, $s0</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">lw </span><span style=\"color: #AE81FF\">40</span><span style=\"color: #F8F8F2\">($s3), $t0</span></span></code></pre></div><p>其原因是必须<strong>严格遵循</strong><code>lw</code>和<code>rw</code>的格式，也就是<code>op reg, off(base)</code>，如果后面能换，那我问你为什么会有lw和sw俩指令呢？<br>:::</p>\n<h4 id=\"主存单元使用的限制\"><a href=\"#主存单元使用的限制\" class=\"headerlink\" title=\"主存单元使用的限制\"></a>主存单元使用的限制</h4><p>MIPS<strong>不支持</strong>主存单元参与运算，主存单元只能和寄存器进行<strong>数据交换</strong>，这样便于设计流水线CPU。<br>:::error 错误用法<br>以下均错误：</p>\n<div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F92672\">add</span><span style=\"color: #F8F8F2\"> $t0, $s1, </span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">($s2)</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">sub</span><span style=\"color: #F8F8F2\"> $t0, </span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">($s2), </span><span style=\"color: #AE81FF\">12</span></span></code></pre></div><p>都错在用了主存单元里面的东西。<br>:::</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">MIPS支持的运算</p>\n<p>寄存器——寄存器：寄存器与寄存器运算，结果写入寄存器。<br>寄存器——立即数：寄存器与立即数运算，结果写入寄存器。</p>\n</div>\n<h4 id=\"lb-sb指令\"><a href=\"#lb-sb指令\" class=\"headerlink\" title=\"lb/sb指令\"></a>lb/sb指令</h4><p>我们望文生义一下，其实和lw/sw差不多，这俩指令从word变成了byte而已，区别在于，如果涉及主存的话，偏移量可以不为4的倍数。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我仔细想了一下，其实lw和sw也可以不为4的倍数，只是会写到后面的内存里面罢了吧，等后面再来纠错吧。</p></blockquote>\n<p>用法：</p>\n<div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">op reg, off(base)</span></span></code></pre></div><p>其实和<code>lw</code>和<code>sw</code>一样，但是需要注意lb在写入寄存器的时候会进行符号位拓展，直接补满高24位，虽然补了，但是作用仅仅是保留符号位，当你调用<code>sb</code>的时候还是只会写入后八位。<br>:::tip 还有个命令<br><code>lbu</code>这个进行的操作就是直接写8个bit，也就是一个byte到寄存器里面，不补符号位（也就是全部补<strong>0</strong>）。<br>:::</p>\n<h4 id=\"指令汇总\"><a href=\"#指令汇总\" class=\"headerlink\" title=\"指令汇总\"></a>指令汇总</h4><ul>\n<li>字操作：<code>lw``sw</code></li>\n<li>半字操作：<code>lh``lhu``sh</code></li>\n<li>字节操作：<code>lb``lbu``sb</code></li>\n</ul>\n<h3 id=\"大小印第安（大端小端）\"><a href=\"#大小印第安（大端小端）\" class=\"headerlink\" title=\"大小印第安（大端小端）\"></a>大小印第安（大端小端）</h3><ul>\n<li>大印第安：最高有效字节在字内的最<strong>低</strong>地址</li>\n<li>小印第安：最高有效字节在字内的最<strong>高</strong>地址<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os5/co5.png\" alt=\"endian\"></li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我们这一般用小印第安，低对低，高对高。</p></blockquote>\n<h2 id=\"判断指令\"><a href=\"#判断指令\" class=\"headerlink\" title=\"判断指令\"></a>判断指令</h2><p>MIPS一般用<strong>标号机制</strong>实现转移：</p>\n<ul>\n<li>MIPS不像c一样有if/while之类的语句块</li>\n<li>每条指令都对应一个32位（不一定）的地址（一个字）</li>\n<li>为了可读性，一般用字符串加冒号的形式作为标号，标记其后指令的地址：比如<code>ForBegin:</code></li>\n<li>汇编通过跳转机制到标号处实现转移（类似c语言的goto）</li>\n</ul>\n<h3 id=\"决策指令\"><a href=\"#决策指令\" class=\"headerlink\" title=\"决策指令\"></a>决策指令</h3><h4 id=\"三个转移指令\"><a href=\"#三个转移指令\" class=\"headerlink\" title=\"三个转移指令\"></a>三个转移指令</h4><ul>\n<li>Branch If Equal：即<code>beq</code>，相等的时候转移：<ul>\n<li><code>beq reg1, reg2, label</code></li>\n<li>当reg1的值和reg2的值相等的时候，跳转到label处继续运行。</li>\n</ul>\n</li>\n<li>Branch If Not Equal：即<code>bne</code>，不相等的时候转移：<ul>\n<li><code>bne reg1, reg2, label</code></li>\n<li>当reg1和reg2的值不等的时候跳转。</li>\n</ul>\n</li>\n<li>Jump：即<code>j</code>，无条件转移：<ul>\n<li><code>j label</code></li>\n<li>无条件，直接跳转，类似c语言的<code>goto</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"if-else的汇编构造方式\"><a href=\"#if-else的汇编构造方式\" class=\"headerlink\" title=\"if-else的汇编构造方式\"></a>if-else的汇编构造方式</h4><p>c语言代码：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F92672\">if</span><span style=\"color: #F8F8F2\">(i </span><span style=\"color: #F92672\">==</span><span style=\"color: #F8F8F2\"> j){</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    a </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> b;</span><span style=\"color: #88846F\"> // then</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span><span style=\"color: #F92672\">else</span><span style=\"color: #F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    a </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #F92672\">-</span><span style=\"color: #F8F8F2\">b;</span><span style=\"color: #88846F\"> // else</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><p>汇编（<code>beq</code>）：</p>\n<div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #88846F\"># i-&gt;$s0, j-&gt;$s1</span></span>\n<span class=\"line\"><span style=\"color: #88846F\"># a-&gt;$s2, b-&gt;$s3</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">beq $s0, $s1, then</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">sub</span><span style=\"color: #F8F8F2\"> $s2, </span><span style=\"color: #AE81FF\">$0</span><span style=\"color: #F8F8F2\">, $s3</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">j end</span></span>\n<span class=\"line\"><span style=\"color: #A6E22E\">then:</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">add</span><span style=\"color: #F8F8F2\"> $s2, $s3, </span><span style=\"color: #AE81FF\">$0</span></span>\n<span class=\"line\"><span style=\"color: #A6E22E\">end:</span></span></code></pre></div><p>汇编（<code>bne</code>）:</p>\n<div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">bne $s0, $s1, else</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">add</span><span style=\"color: #F8F8F2\"> $s2, $s3, </span><span style=\"color: #AE81FF\">$0</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">j end</span></span>\n<span class=\"line\"><span style=\"color: #A6E22E\">else:</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">sub</span><span style=\"color: #F8F8F2\"> $s2, </span><span style=\"color: #AE81FF\">$0</span><span style=\"color: #F8F8F2\">, $s3</span></span>\n<span class=\"line\"><span style=\"color: #A6E22E\">end:</span></span></code></pre></div><h4 id=\"switch-case的构造方式\"><a href=\"#switch-case的构造方式\" class=\"headerlink\" title=\"switch-case的构造方式\"></a>switch-case的构造方式</h4><p>大多数高级程序设计语言都有switch-case结构，我们在MIPS里面可以如下构造：<br>C语言：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F92672\">switch</span><span style=\"color: #F8F8F2\">(){</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">case</span><span style=\"color: #F8F8F2\"> 条件1:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        语句块1;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">case</span><span style=\"color: #F8F8F2\"> 条件2:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        语句块2;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    ...</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">case</span><span style=\"color: #F8F8F2\"> 条件N:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        语句块N;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">default</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        语句块default;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><p>MIPS汇编：</p>\n<div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">    b类, 条件1, Case1</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    b类, 条件2, Case2</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    ...</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    b类, 条件N, CaseN</span></span>\n<span class=\"line\"><span style=\"color: #A6E22E\">Default:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    语句块default</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    j SwitchEnd</span></span>\n<span class=\"line\"><span style=\"color: #A6E22E\">Case1:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    语句块1</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    j SwitchEnd</span></span>\n<span class=\"line\"><span style=\"color: #A6E22E\">Case2:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    语句块2</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    j SwitchEnd</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    ...</span></span>\n<span class=\"line\"><span style=\"color: #A6E22E\">CaseN:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    语句块N</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    j SwitchEnd</span></span>\n<span class=\"line\"><span style=\"color: #A6E22E\">SwitchEnd:</span></span></code></pre></div><details class=\"custom-details\">\n<summary>指令类别</summary>\n<ul>\n<li>R型：一般用于寄存器-寄存器操作。</li>\n<li>I型：一般用于立即数访问和load操作。</li>\n<li>S型：用于访存store操作。</li>\n<li>B型：用于条件跳转操作。</li>\n<li>J型：用于无条件操作。<br>:::</li>\n</ul>\n<h3 id=\"其他分支指令\"><a href=\"#其他分支指令\" class=\"headerlink\" title=\"其他分支指令\"></a>其他分支指令</h3><p>与0比较的分支指令(即<strong>b</strong>xx<strong>z</strong>类指令)</p>\n<ul>\n<li>blez：小于等于0转移</li>\n<li>bltz：小于0转移</li>\n<li>bgez：大于等于0转移</li>\n<li>bgtz：大于0转移</li>\n</ul>\n<p>以上<strong>b</strong>xx<strong>z</strong>类指令格式均为</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">op rs, label</span></span></code></pre></div><p>:::tip<br>由于固定和0比较大小，所以就不需要劳烦<code>$0</code>寄存器了。\n</details>\n<h3 id=\"循环指令？\"><a href=\"#循环指令？\" class=\"headerlink\" title=\"循环指令？\"></a>循环指令？</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>MIPS只需要根据条件转移就好啦！</p></blockquote>\n<p>比如我们构建一个复制字符串的<code>while</code>循环，从<code>p</code>数组复制到<code>q</code>数组，一种c语言的<del>神金</del>实现如下：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #66D9EF; font-style: italic\">char</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #F92672\">*</span><span style=\"color: #F8F8F2\">p, </span><span style=\"color: #F92672\">*</span><span style=\"color: #F8F8F2\">q;</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">while</span><span style=\"color: #F8F8F2\">((</span><span style=\"color: #F92672\">*</span><span style=\"color: #F8F8F2\">q</span><span style=\"color: #F92672\">++</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #F92672\">*</span><span style=\"color: #F8F8F2\">p</span><span style=\"color: #F92672\">++</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #F92672\">!=</span><span style=\"color: #F8F8F2\"> EOF);</span></span></code></pre></div><details class=\"custom-details\">\n<summary>如果你不懂这段神金的话……</summary>\n<p><ul>\n<li>c语言中，赋值表达式的返回值是<strong>左值</strong>。</li>\n<li>指针<code>++</code>作用是移动一个类型的空间，<code>++</code>在后表示这一行执行完后再自增。<br>:::</li>\n</ul>\n<p>汇编后代码如下：</p>\n<div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #88846F\"># p-&gt;$s0, q-&gt;$s1</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">Loop</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    lb $t0, </span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">($s0)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    sb $t0, </span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">($s1)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    addi $s0, $s0, </span><span style=\"color: #AE81FF\">1</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    addi $s1, $s1, </span><span style=\"color: #AE81FF\">1</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    bne $t0, </span><span style=\"color: #AE81FF\">$0</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #F92672\">Loop</span></span></code></pre></div><h2 id=\"运算指令\"><a href=\"#运算指令\" class=\"headerlink\" title=\"运算指令\"></a>运算指令</h2><p>MIPS为高级程序设计语言的加减乘除等算术运算提供了相应的指令，并且可以分为“寄存器-寄存器（R-R）”和“寄存器-立即数（R-I）”两类。</p>\n<h3 id=\"加减法\"><a href=\"#加减法\" class=\"headerlink\" title=\"加减法\"></a>加减法</h3><h4 id=\"指令汇总-1\"><a href=\"#指令汇总-1\" class=\"headerlink\" title=\"指令汇总\"></a>指令汇总</h4><p>加法有<strong>四</strong>条：<code>add``addu``addi``addiu</code><br>减法只有<strong>两</strong>条：<code>sub``subu</code><br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os5/co6.png\" alt=\"addsub\"></p>\n<p>:::tip 没有subi/subiu的原因<br>加上相反数就是减，所以可以用<code>addi``addiu</code>直接实现，多用多浪费嘛。</p>\n</details>\n<h4 id=\"溢出\"><a href=\"#溢出\" class=\"headerlink\" title=\"溢出\"></a>溢出</h4><p>MIPS会检测溢出，并且溢出时<strong>产生错误</strong>，当指令有<em>unsigned</em>关键字的时候忽略溢出。</p>\n<div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #88846F\"># $s0=0x80000000（即最小的负数）, $s1=0x1</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">add</span><span style=\"color: #F8F8F2\">\t   \t$t0, $s0, $s0</span><span style=\"color: #88846F\">\t# 溢出错误</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">addu\t$t1, $s0, $s0</span><span style=\"color: #88846F\">\t# $t1 = 0</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">addi\t$t2, $s0, -</span><span style=\"color: #AE81FF\">1</span><span style=\"color: #88846F\">\t# 溢出错误</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">addiu\t$t3, $s0, -</span><span style=\"color: #AE81FF\">1</span><span style=\"color: #88846F\">\t# $t3 = 0x7FFFFFFF</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">sub</span><span style=\"color: #F8F8F2\">\t\t$t4, $s0, $s1</span><span style=\"color: #88846F\">\t# 溢出错误</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">subu\t$t5, $s0, $s1</span><span style=\"color: #88846F\">\t# $t5 = 0x7FFFFFFF</span></span></code></pre></div><h3 id=\"乘除法\"><a href=\"#乘除法\" class=\"headerlink\" title=\"乘除法\"></a>乘除法</h3><h4 id=\"HI-LO寄存器\"><a href=\"#HI-LO寄存器\" class=\"headerlink\" title=\"HI/LO寄存器\"></a>HI/LO寄存器</h4><p>注意，乘除法指令中并不存在dst寄存器，因为结果单独存在HI和LO这俩特殊寄存器里面，并不属于之前的32个<strong>通用寄存器</strong>。<br>有两条特殊的寄存器读指令：</p>\n<ul>\n<li>move from HI：即从HI读取，写入到dst里面（<code>mfhi dst</code>）</li>\n<li>move from LO：即从LO读取，写入到dst里面（<code>mflo dst</code>）</li>\n</ul>\n<h4 id=\"乘除法指令\"><a href=\"#乘除法指令\" class=\"headerlink\" title=\"乘除法指令\"></a>乘除法指令</h4><ul>\n<li>乘法是<code>mult src1,src2</code><ul>\n<li>结果是<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"10.019ex\" height=\"1.532ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 4428.4 677\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(469,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(920,0)\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1353,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2075.2,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2575.4,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3044.4,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3495.4,0)\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3928.4,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></svg></mjx-container>，并且低32位保存在LO寄存器，高32位保存在HI寄存器</li>\n</ul>\n</li>\n<li>除法是<code>div src1,src2</code><ul>\n<li>结果是<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.798ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.96ex\" height=\"2.755ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -864.9 1750.3 1217.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,394) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(469,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(920,0)\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1353,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-345) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(469,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(920,0)\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1353,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><rect width=\"1510.3\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></svg></mjx-container>，LO保存商，HI保存余数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h3><h4 id=\"按位计算\"><a href=\"#按位计算\" class=\"headerlink\" title=\"按位计算\"></a>按位计算</h4><p>我们依旧假设<code>a-&gt;$s1, b-&gt;$s2, c-&gt;$s3</code>，有如下位运算指令：<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os5/co7.png\" alt=\"wei\"><br>同样的，也分为是否有立即数的两个版本。</p>\n<h4 id=\"移位指令\"><a href=\"#移位指令\" class=\"headerlink\" title=\"移位指令\"></a>移位指令</h4><p>位移如果用立即数，那就只有<strong>0-31</strong>有效，如果用寄存器，那就只有第五位（视作无符号数）有效。<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os5/co8.png\" alt=\"yiwei\"></p>\n<p>方便记忆来说，s代表移位类指令，第二位l、r代表左右，第三位l代表逻辑（logical），a代表算数（arithmetic），v代表不用立即数，而是寄存器。<br>:::warning 注意<br>左移只需要低位补0，所以不需要算术左移，没有意义，而算术右移是要补符号位的，所以得区分。<br>:::</p>\n<div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">addi $t0, </span><span style=\"color: #AE81FF\">$0</span><span style=\"color: #F8F8F2\">, -</span><span style=\"color: #AE81FF\">256</span><span style=\"color: #88846F\"> # $t0=0xFFFFFF00</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">sll\t $s0, $t0, </span><span style=\"color: #AE81FF\">3</span><span style=\"color: #F8F8F2\">  </span><span style=\"color: #88846F\"> # $s0=0xFFFFF800</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">srl  $s1, $t0, </span><span style=\"color: #AE81FF\">8</span><span style=\"color: #F8F8F2\">  </span><span style=\"color: #88846F\"> # $s1=0x00FFFFFF</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">sra\t $s2, $t0, </span><span style=\"color: #AE81FF\">8</span><span style=\"color: #F8F8F2\">  </span><span style=\"color: #88846F\"> # $s2=0xFFFFFFFF</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">addi $t1, $s0, -</span><span style=\"color: #AE81FF\">22</span><span style=\"color: #88846F\"> # $t1=0xFFFFF7EA 低五位01010即十进制的10</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">sllv $s3, $t0, $t1</span><span style=\"color: #88846F\"> # $s3=0xFFFC0000</span></span></code></pre></div>","feature":true,"text":"L5-机器语言1，终于似乎到正题了，别问我为什么没有L4，问就是国庆节。...","permalink":"/post/buaa-co-pre-5","photos":[],"count_time":{"symbolsCount":"8.2k","symbolsTime":"7 mins."},"categories":[{"name":"北航计组","slug":"北航计组","count":5,"path":"api/categories/北航计组.json"},{"name":"学习笔记","slug":"北航计组/学习笔记","count":5,"path":"api/categories/北航计组/学习笔记.json"}],"tags":[{"name":"计算机组成原理","slug":"计算机组成原理","count":5,"path":"api/tags/计算机组成原理.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%BA%E5%99%A8%E8%AF%AD%E8%A8%801\"><span class=\"toc-text\">机器语言1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%BA%E5%99%A8%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">机器语言概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E4%BB%A3%E7%A0%81%E5%88%B0%E8%BF%90%E8%A1%8C\"><span class=\"toc-text\">从代码到运行</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">编译</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B1%87%E7%BC%96\"><span class=\"toc-text\">汇编</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">存储</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">加载</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C\"><span class=\"toc-text\">运行</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E9%9B%86\"><span class=\"toc-text\">指令集</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RISC\"><span class=\"toc-text\">RISC</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">设计原则</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">寄存器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E7%9A%84%E6%93%8D%E4%BD%9C%E6%95%B0\"><span class=\"toc-text\">计算机硬件的操作数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4%E5%8D%95%E4%BD%8D\"><span class=\"toc-text\">计算机中的时间单位</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MIPS%E7%9A%84%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">MIPS的寄存器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E5%92%8C%E7%AB%8B%E5%8D%B3%E6%95%B0\"><span class=\"toc-text\">指令和立即数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MIPS%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">MIPS指令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">指令格式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">指令的特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">例子</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#0%E5%8F%B7%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">0号寄存器</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AB%8B%E5%8D%B3%E6%95%B0\"><span class=\"toc-text\">立即数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">数据传输指令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E5%AD%98%E5%8D%95%E5%85%83\"><span class=\"toc-text\">主存单元</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%84%E5%AD%98%E5%99%A8%EF%BC%9F%E4%B8%BB%E5%AD%98%EF%BC%9F\"><span class=\"toc-text\">寄存器？主存？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E5%AD%98%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">主存的抽象模型</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%B0%E5%9D%80%E7%9A%84%E8%A1%A8%E7%A4%BA%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">地址的表示方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">两种方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E5%9C%B0%E5%9D%80-%E5%81%8F%E7%A7%BB%E7%9A%84%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">基地址+偏移的优点</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E6%8C%87%E4%BB%A4-1\"><span class=\"toc-text\">数据传输指令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">语法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#lw-sw%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">lw&#x2F;sw指令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E5%AD%98%E5%8D%95%E5%85%83%E4%BD%BF%E7%94%A8%E7%9A%84%E9%99%90%E5%88%B6\"><span class=\"toc-text\">主存单元使用的限制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#lb-sb%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">lb&#x2F;sb指令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E6%B1%87%E6%80%BB\"><span class=\"toc-text\">指令汇总</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%A7%E5%B0%8F%E5%8D%B0%E7%AC%AC%E5%AE%89%EF%BC%88%E5%A4%A7%E7%AB%AF%E5%B0%8F%E7%AB%AF%EF%BC%89\"><span class=\"toc-text\">大小印第安（大端小端）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">判断指令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%B3%E7%AD%96%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">决策指令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E4%B8%AA%E8%BD%AC%E7%A7%BB%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">三个转移指令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#if-else%E7%9A%84%E6%B1%87%E7%BC%96%E6%9E%84%E9%80%A0%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">if-else的汇编构造方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#switch-case%E7%9A%84%E6%9E%84%E9%80%A0%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">switch-case的构造方式</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E5%88%86%E6%94%AF%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">其他分支指令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E6%8C%87%E4%BB%A4%EF%BC%9F\"><span class=\"toc-text\">循环指令？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">运算指令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E5%87%8F%E6%B3%95\"><span class=\"toc-text\">加减法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E6%B1%87%E6%80%BB-1\"><span class=\"toc-text\">指令汇总</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%BA%A2%E5%87%BA\"><span class=\"toc-text\">溢出</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B9%98%E9%99%A4%E6%B3%95\"><span class=\"toc-text\">乘除法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HI-LO%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">HI&#x2F;LO寄存器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B9%98%E9%99%A4%E6%B3%95%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">乘除法指令</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">位运算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%89%E4%BD%8D%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">按位计算</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A7%BB%E4%BD%8D%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">移位指令</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"大仓鼠","slug":"blog-author","avatar":"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/%E7%BD%91%E7%AB%99%E7%B4%A0%E6%9D%90%E5%9B%BE%E7%89%87/%E5%A4%B4%E5%83%8Flogo/head.jpg","link":"/","description":"我的博客（隐藏版）","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"折腾笔记-hexo、Mathjax、Latex的奇妙bug","uid":"106042df361711128e93d1695c28edbf","slug":"hexo-mathjax","date":"2024-07-28T16:00:00.000Z","updated":"2024-07-29T11:38:33.576Z","comments":true,"path":"api/articles/hexo-mathjax.json","keywords":null,"cover":"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/post2/mj1.png","text":"hexo写Latex需要换行的时候经常会遇上问题，结果罪魁祸首是转义字符。...","permalink":"/post/hexo-mathjax","photos":[],"count_time":{"symbolsCount":768,"symbolsTime":"1 mins."},"categories":[{"name":"折腾笔记","slug":"折腾笔记","count":2,"path":"api/categories/折腾笔记.json"},{"name":"网页","slug":"折腾笔记/网页","count":2,"path":"api/categories/折腾笔记/网页.json"}],"tags":[{"name":"hexo","slug":"hexo","count":1,"path":"api/tags/hexo.json"},{"name":"Mathjax","slug":"Mathjax","count":1,"path":"api/tags/Mathjax.json"},{"name":"Latex","slug":"Latex","count":1,"path":"api/tags/Latex.json"}],"author":{"name":"大仓鼠","slug":"blog-author","avatar":"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/%E7%BD%91%E7%AB%99%E7%B4%A0%E6%9D%90%E5%9B%BE%E7%89%87/%E5%A4%B4%E5%83%8Flogo/head.jpg","link":"/","description":"我的博客（隐藏版）","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}