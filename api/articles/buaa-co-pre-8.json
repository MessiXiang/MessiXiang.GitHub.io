{"title":"北航计组-预习8-MIPS数据通路","uid":"0a654409e2cd458ca3e033f4946855b9","slug":"buaa-co-pre-8","date":"2024-08-14T16:00:00.000Z","updated":"2024-08-19T05:57:44.631Z","comments":true,"path":"api/articles/buaa-co-pre-8.json","keywords":null,"cover":"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co1.jpg?x-oss-process=image/resize,w_600","content":"<h1 id=\"MIPS数据通路\"><a href=\"#MIPS数据通路\" class=\"headerlink\" title=\"MIPS数据通路\"></a>MIPS数据通路</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"电脑的五个组件\"><a href=\"#电脑的五个组件\" class=\"headerlink\" title=\"电脑的五个组件\"></a>电脑的五个组件</h3><p>一个电脑至少需要这些组件才能正常工作：</p>\n<ul>\n<li>控制器：control</li>\n<li>数据通路：datapath</li>\n<li>主存：memory</li>\n<li>输入设备：input</li>\n<li>输出设备：output</li>\n</ul>\n<p><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co1.png\" alt=\"computer\"></p>\n<h3 id=\"处理器\"><a href=\"#处理器\" class=\"headerlink\" title=\"处理器\"></a>处理器</h3><p>处理器的功能就是实现ISA（指令集架构）的指令，处理器包含<strong>数据通路</strong>和<strong>控制器</strong>：</p>\n<ul>\n<li>数据通路：包含用于实现指令的操作所必要的硬件。</li>\n<li>控制器；控制数据通路的行为的硬件。</li>\n</ul>\n<h3 id=\"MIPS的轻量级指令子集\"><a href=\"#MIPS的轻量级指令子集\" class=\"headerlink\" title=\"MIPS的轻量级指令子集\"></a>MIPS的轻量级指令子集</h3><ul>\n<li>ADDU and SUBU：<ul>\n<li><code>addu rd,rs,rt</code></li>\n<li><code>subu rd,rs,rt</code></li>\n</ul>\n</li>\n<li>OR Immediate:<ul>\n<li><code>ori rt,rs,imm16</code></li>\n</ul>\n</li>\n<li>LOAD and STORE word:<ul>\n<li><code>lw rt,rs,imm16</code></li>\n<li><code>sw rt,rs,imm16</code></li>\n</ul>\n</li>\n<li>BRANCH:<ul>\n<li><code>beq rs,rt,imm16</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"寄存器传递语言\"><a href=\"#寄存器传递语言\" class=\"headerlink\" title=\"寄存器传递语言\"></a>寄存器传递语言</h3><p>即RTL，是一种编译过程的中间语言，可以给出每一个指令的含义：<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co2.png\" alt=\"rtl\"></p>\n<h3 id=\"CPU开发过程\"><a href=\"#CPU开发过程\" class=\"headerlink\" title=\"CPU开发过程\"></a>CPU开发过程</h3><ol>\n<li>分析每条指令的RTL，梳理总结数据通路的设计需求。</li>\n<li>选择合适的数据通路功能部件。</li>\n<li>根据RTL组装数据通路，分析建立功能部件之间的正确连接。</li>\n<li>根据RTL，分析功能部件执行的功能，反推控制信号取值。</li>\n<li>生成控制器<ul>\n<li>构建控制信号真值表，化简。</li>\n<li>根据最简表达式构建门电路。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"单周期CPU设计模型\"><a href=\"#单周期CPU设计模型\" class=\"headerlink\" title=\"单周期CPU设计模型\"></a>单周期CPU设计模型</h2><h3 id=\"指令集功能需求\"><a href=\"#指令集功能需求\" class=\"headerlink\" title=\"指令集功能需求\"></a>指令集功能需求</h3><ul>\n<li>存储器（MEM）：<ul>\n<li>指令存储器和数据存储器（模拟cache结构）</li>\n<li>指令存储器只读</li>\n<li>数据存储器读写皆可</li>\n</ul>\n</li>\n<li>寄存器堆（32个32bit寄存器）：<ul>\n<li>能同时读出rs和rt两个寄存器</li>\n<li>可以写入到rt或者rd寄存器</li>\n</ul>\n</li>\n<li>程序计数器PC</li>\n<li>下一条指令地址的计算单元</li>\n<li>拓展立即数：signed/unsigned</li>\n<li>执行运算的计算单元：<ul>\n<li>add/sub/or之类的</li>\n</ul>\n</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">一些重要缩写</p>\n<p><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co3.png\" alt=\"suoxie\"></p>\n</div>\n<h3 id=\"数据通路的抽象模型\"><a href=\"#数据通路的抽象模型\" class=\"headerlink\" title=\"数据通路的抽象模型\"></a>数据通路的抽象模型</h3><p>指令执行的主要步骤：取指令、译码、执行、访存、回写。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>为什么是五个阶段？<br>因为MIPS里面的<code>lw</code>必须至少用到这五个阶段。当然，早期MIPS和其他CPU可能不到五个截断，现代的CPU可能有20~30个截断，都是合理的。</p>\n</div>\n<p><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co4.png\" alt=\"datapath\"></p>\n<h4 id=\"第一步：取指令\"><a href=\"#第一步：取指令\" class=\"headerlink\" title=\"第一步：取指令\"></a>第一步：取指令</h4><ol>\n<li>PC区段IM输出指令</li>\n<li>PC驱动NPC计算下一个PC的值</li>\n</ol>\n<h4 id=\"第二步：译码\"><a href=\"#第二步：译码\" class=\"headerlink\" title=\"第二步：译码\"></a>第二步：译码</h4><ol>\n<li>IM驱动控制器（<em>不在图中</em>）分析指令的opcode和funct域得到具体指令含义</li>\n<li>IM驱动RF读出俩寄存器的值（rs,rt）</li>\n</ol>\n<h4 id=\"第三步：执行\"><a href=\"#第三步：执行\" class=\"headerlink\" title=\"第三步：执行\"></a>第三步：执行</h4><ul>\n<li>RF输出的寄存器值驱动ALU完成相应计算<ul>\n<li>加减乘除、移位、逻辑运算、比较运算</li>\n<li>计算lw和sw的地址</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第四步：访存\"><a href=\"#第四步：访存\" class=\"headerlink\" title=\"第四步：访存\"></a>第四步：访存</h4><ul>\n<li>lw：DM输入地址后，就输出数据</li>\n<li>sw：DM输入地址和写入的数据</li>\n<li>其他指令：绕过该环节</li>\n</ul>\n<h4 id=\"第五步：回写\"><a href=\"#第五步：回写\" class=\"headerlink\" title=\"第五步：回写\"></a>第五步：回写</h4><ul>\n<li>将ALU的结构或者DM读出的数写回RF</li>\n<li><code>beq</code>、<code>jal</code>、<code>jr</code>、<code>sw</code>不涉及此环节</li>\n<li>注意RF在第三、第五阶段都有所涉及，前者用于读出，后者写入。</li>\n</ul>\n<h2 id=\"数据通路基础部件建模\"><a href=\"#数据通路基础部件建模\" class=\"headerlink\" title=\"数据通路基础部件建模\"></a>数据通路基础部件建模</h2><h3 id=\"MUX设计\"><a href=\"#MUX设计\" class=\"headerlink\" title=\"MUX设计\"></a>MUX设计</h3><p>多选一选择器其实只需要选择输入的信号对应标号的数据即可：<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co5.png\" alt=\"mux4\"></p>\n<div class=\"language-verilog\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">verilog</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #66D9EF; font-style: italic\">module</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #A6E22E; text-decoration: underline\">mux4</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">31</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]D0,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">31</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]D1,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">31</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]D2,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">31</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]D3,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">1</span><span style=\"color: #F8F8F2\">]s,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #F92672\">output</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">31</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]y);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">assign</span><span style=\"color: #F8F8F2\">  y </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> (s </span><span style=\"color: #F92672\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #AE81FF\">2'b00</span><span style=\"color: #F8F8F2\">)? D0:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                (s </span><span style=\"color: #F92672\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #AE81FF\">2'b01</span><span style=\"color: #F8F8F2\">)? D1:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                (s </span><span style=\"color: #F92672\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #AE81FF\">2'b10</span><span style=\"color: #F8F8F2\">)? D2:D3;</span></span>\n<span class=\"line\"><span style=\"color: #66D9EF; font-style: italic\">endmodule</span></span></code></pre></div><h3 id=\"寄存器\"><a href=\"#寄存器\" class=\"headerlink\" title=\"寄存器\"></a>寄存器</h3><p>我们的32bit寄存器需要32位的输入与输出，并且为了符合实际情况，需要一个<strong>写入使能</strong>与边缘触发的功能：</p>\n<ul>\n<li>使能为0的时候输出不变。</li>\n<li>使能为1的时候，在上升沿将输出变成输入信号。</li>\n</ul>\n<p><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co6.png\" alt=\"reg\"></p>\n<h4 id=\"1位寄存器\"><a href=\"#1位寄存器\" class=\"headerlink\" title=\"1位寄存器\"></a>1位寄存器</h4><div class=\"language-verilog\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">verilog</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #88846F\">// 一位的D寄存器，包含有使能enable和异步复位rst</span></span>\n<span class=\"line\"><span style=\"color: #66D9EF; font-style: italic\">module</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #A6E22E; text-decoration: underline\">d_ff</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> d,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #F92672\">output</span><span style=\"color: #F8F8F2\"> q,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> clk,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> enable,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> rst);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">reg</span><span style=\"color: #F8F8F2\"> r;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">assign</span><span style=\"color: #F8F8F2\"> q </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> r;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">always</span><span style=\"color: #F8F8F2\"> @(</span><span style=\"color: #F92672\">posedge</span><span style=\"color: #F8F8F2\"> clk </span><span style=\"color: #F92672\">|</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #F92672\">posedge</span><span style=\"color: #F8F8F2\"> rst) </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #F92672\">if</span><span style=\"color: #F8F8F2\">(rst) r </span><span style=\"color: #F92672\">&lt;=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #AE81FF\">1'b0</span><span style=\"color: #F8F8F2\">;  </span><span style=\"color: #88846F\">// 当rst上升沿时，始终触发，与clk无关，因此为异步。</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #F92672\">else</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #F92672\">if</span><span style=\"color: #F8F8F2\">(enable) r </span><span style=\"color: #F92672\">&lt;=</span><span style=\"color: #F8F8F2\"> d;</span></span>\n<span class=\"line\"><span style=\"color: #66D9EF; font-style: italic\">endmodule</span></span></code></pre></div><div class=\"custom-quote danger\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M19.76 5.23C15.84 5.23 12 2 12 2C12 2 8.15996 5.23 4.23996 5.23C4.23996 5.23 1.86996 16.99 12 22C22.13 16.99 19.76 5.23 19.76 5.23Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 16H12\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">特别注意</p>\n<p>大部分verilog编译器都会有“维持输出”的实现，也就是当<code>if</code>分支没满足的时候，涉及的变量不会被修改，这个实现在这里是合理的，为我们补上了省略的<code>else</code>，但是有些时候不太合理，需要你自己设置其他情况，<a href=\"https://github.com/MessiXiang/Solutions-for-HDLbits/blob/main/verilog_language/procedures/if_statement_laches.v\">💥参见这里💥</a>。</p>\n</div>\n<h4 id=\"32位寄存器\"><a href=\"#32位寄存器\" class=\"headerlink\" title=\"32位寄存器\"></a>32位寄存器</h4><div class=\"language-verilog\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">verilog</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #88846F\">// 一位D寄存器d_ff模块已经定义过了，此处忽略</span></span>\n<span class=\"line\"><span style=\"color: #66D9EF; font-style: italic\">module</span><span style=\"color: #F8F8F2\">  </span><span style=\"color: #A6E22E; text-decoration: underline\">d32</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">31</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]d,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #F92672\">output</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">31</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]q,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> clk,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> enable,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> rst);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">genvar</span><span style=\"color: #F8F8F2\"> i;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">generate</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #F92672\">for</span><span style=\"color: #F8F8F2\">(i </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">;i </span><span style=\"color: #F92672\">&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #AE81FF\">32</span><span style=\"color: #F8F8F2\">;i </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #F92672\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #AE81FF\">1</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #F92672\">begin</span><span style=\"color: #F8F8F2\">:unit_d    </span><span style=\"color: #88846F\">// begin必须要有标签，作为生成的索引名字</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #F92672\">d_ff</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #F92672\">inst_d_ff</span><span style=\"color: #F8F8F2\">(d[i], q[i], clk, enable, rst);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #F92672\">end</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">endgenerate</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #66D9EF; font-style: italic\">endmodule</span></span></code></pre></div><h3 id=\"PC程序计数器\"><a href=\"#PC程序计数器\" class=\"headerlink\" title=\"PC程序计数器\"></a>PC程序计数器</h3><p>PC的本质就是一个<strong>32位寄存器</strong>，并且在复位之后需要有一个确定的初始值，即第一条指令的地址（假设是<code>32'h00000000</code>），因此我们可以得知PC的输入输出信号与32位寄存器别无二致。</p>\n<p><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co7.png\" alt=\"pc\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">信号名</th>\n<th align=\"center\">方向</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">clk</td>\n<td align=\"center\">input</td>\n<td align=\"center\">时钟信号</td>\n</tr>\n<tr>\n<td align=\"center\">reset</td>\n<td align=\"center\">input</td>\n<td align=\"center\">复位信号</td>\n</tr>\n<tr>\n<td align=\"center\">[31:0]DI</td>\n<td align=\"center\">input</td>\n<td align=\"center\">32位输入</td>\n</tr>\n<tr>\n<td align=\"center\">[31:0]DO</td>\n<td align=\"center\">output</td>\n<td align=\"center\">32位输出</td>\n</tr>\n</tbody></table>\n<h3 id=\"NPC组件\"><a href=\"#NPC组件\" class=\"headerlink\" title=\"NPC组件\"></a>NPC组件</h3><p>对于NPC来说，涉及各种寻址的问题，因此输入信号也很多样，包含大部份顺序指令，即<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.315ex\" height=\"1.781ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 3233.4 787\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(751,0)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1733.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2733.4,0)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g></g></svg></mjx-container>，还有<code>beq</code>这样的相对寻址的16位imm，<code>jal</code>这样的伪直接寻址的26位imm，以及<code>jr</code>的寄存器32位寻址，因此可以抽象如下：<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co8.png\" alt=\"npc\"></p>\n<p>其信号分析如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">信号名</th>\n<th align=\"center\">方向</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">[31:0]PC</td>\n<td align=\"center\">input</td>\n<td align=\"center\">当前指令地址</td>\n</tr>\n<tr>\n<td align=\"center\">[31:0]NPC</td>\n<td align=\"center\">output</td>\n<td align=\"center\">下一条指令的地址</td>\n</tr>\n<tr>\n<td align=\"center\">[25:0]imm26</td>\n<td align=\"center\">input</td>\n<td align=\"center\"><code>jal</code>的26位偏移</td>\n</tr>\n<tr>\n<td align=\"center\">[31:0]A32</td>\n<td align=\"center\">input</td>\n<td align=\"center\"><code>jr</code>利用的寄存器保存的值</td>\n</tr>\n<tr>\n<td align=\"center\">[1:0]NPCOp</td>\n<td align=\"center\">input</td>\n<td align=\"center\">NPC寻址模式的控制码</td>\n</tr>\n<tr>\n<td align=\"center\">Zero</td>\n<td align=\"center\">input</td>\n<td align=\"center\">相等的比较结果（0/1）</td>\n</tr>\n</tbody></table>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p>对于<code>beq</code>来说，其RTL为：<br>PC &lt;- (rs==rt)?(PC+4+sext(imm16)):(PC+4)</p>\n<p>因此我们需要用一个输入的wire来告诉NPC，rs和rt是否相等。</p>\n</div>\n<h3 id=\"RF寄存器堆\"><a href=\"#RF寄存器堆\" class=\"headerlink\" title=\"RF寄存器堆\"></a>RF寄存器堆</h3><p><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co9.png\" alt=\"rf\"><br>根据需求，我们可以推知：</p>\n<ul>\n<li>寄存器堆包含32<strong>个</strong>寄存器<ul>\n<li>RD1/RD2：读出的两个寄存器的值</li>\n<li>WD：写入的值</li>\n</ul>\n</li>\n<li>寄存器编号输入<ul>\n<li>A1/A2：读出寄存器编号</li>\n<li>A3：写入寄存器编号</li>\n</ul>\n</li>\n<li>写入使能Wr<ul>\n<li>时钟信号上升沿并且同时Wr为1的时候可以写入（时序逻辑）</li>\n</ul>\n</li>\n<li>读出的时候可以视作31选1的MUX，视作组合逻辑（区别于写入）<ul>\n<li>2个读出端口分别独立，不会互相干扰</li>\n<li><code>$0</code>接地，应该是不需要选的吧（猜测）</li>\n</ul>\n</li>\n<li>内部有31个32位寄存器，并且<code>$0</code>寄存器接地，保证时刻为0</li>\n<li>DEMUX：分离器/解码器<ul>\n<li>N位编码产生<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.74ex\" height=\"1.914ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -846 1210.9 846\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(533,363) scale(0.707)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g></g></g></g></svg></mjx-container>个输出，并且有且仅有一个有效</li>\n<li>对于32个寄存器来说，需要5-32型DEMUX作为写入选择</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co10.png\" alt=\"rf2\"></p>\n<div class=\"language-verilog\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">verilog</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F92672\">module</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">31</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]WD, </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">       </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> CLK, </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">       </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> WE, </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">       </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">4</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]A1, </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">       </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">4</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]A2, </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">       </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">4</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]A3, </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">       </span><span style=\"color: #F92672\">output</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">31</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]RD1, </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">       </span><span style=\"color: #F92672\">output</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">31</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]RD2);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">reg</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">31</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]rf[</span><span style=\"color: #AE81FF\">31</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">1</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">always</span><span style=\"color: #F8F8F2\"> @(</span><span style=\"color: #F92672\">posedge</span><span style=\"color: #F8F8F2\"> CLK)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #F92672\">if</span><span style=\"color: #F8F8F2\"> (WE)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            rf[A3] </span><span style=\"color: #F92672\">&lt;=</span><span style=\"color: #F8F8F2\"> WD;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">assign</span><span style=\"color: #F8F8F2\"> RD1 </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> (A1 </span><span style=\"color: #F92672\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #AE81FF\">5'b0</span><span style=\"color: #F8F8F2\">) ? </span><span style=\"color: #AE81FF\">32'b0</span><span style=\"color: #F8F8F2\">:rf[A1];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">assign</span><span style=\"color: #F8F8F2\"> RD2 </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> (A2 </span><span style=\"color: #F92672\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #AE81FF\">5'b0</span><span style=\"color: #F8F8F2\">) ? </span><span style=\"color: #AE81FF\">32'b0</span><span style=\"color: #F8F8F2\">:rf[A2];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F92672\">endmodule</span></span></code></pre></div><h3 id=\"指令存储器IM\"><a href=\"#指令存储器IM\" class=\"headerlink\" title=\"指令存储器IM\"></a>指令存储器IM</h3><p>存储器可以理解成一个数组，需要的时候用下标取出里面的数，因此读出的操作可以视作组合逻辑。<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co11.png\" alt=\"im\"></p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">访问时间</p>\n<p>地址A需要有效<strong>一段时间</strong>后，RD才会输出正确的值，这段时间就叫做<strong>访问时间</strong>。</p>\n</div>\n<h3 id=\"数据存储器DM\"><a href=\"#数据存储器DM\" class=\"headerlink\" title=\"数据存储器DM\"></a>数据存储器DM</h3><p>其实就是IM加入了写入功能，但是写入操作得满足时序逻辑，因此除了WD输入，还需要使能Wr盒时钟CLK信号。</p>\n<ul>\n<li>读：Wr无所谓，最好是0，下标A的单元数据在访问时间后从RD输出</li>\n<li>写：CLK上升沿并且Wr=1有效时候，WD写入下标A的单元。</li>\n</ul>\n<div class=\"language-verilog\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">verilog</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #66D9EF; font-style: italic\">module</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #A6E22E; text-decoration: underline\">MEM4KB</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">9</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]A, </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">              </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">31</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]DI,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">              </span><span style=\"color: #F92672\">output</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">31</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]DO,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">              </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> Wr, </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">              </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> CLK);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">reg</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">31</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]array[</span><span style=\"color: #AE81FF\">1023</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">assign</span><span style=\"color: #F8F8F2\"> DO </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> array[A];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">always</span><span style=\"color: #F8F8F2\"> @(</span><span style=\"color: #F92672\">posedge</span><span style=\"color: #F8F8F2\"> CLK)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #F92672\">if</span><span style=\"color: #F8F8F2\">(Wr)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            array[A] </span><span style=\"color: #F92672\">&lt;=</span><span style=\"color: #F8F8F2\"> DI;</span></span>\n<span class=\"line\"><span style=\"color: #66D9EF; font-style: italic\">endmodule</span></span></code></pre></div><div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p>CLK信号与输出无关，和之前那些存储、寄存器之类的是一样的。</p>\n<p>Verilog代码里面的寄存器在实际实现的时候会用<strong>定制的库</strong>而非reg（有一年P8的存储器得用FPGA内置的块存储器）</p>\n</div>\n<h3 id=\"算数单元ALU\"><a href=\"#算数单元ALU\" class=\"headerlink\" title=\"算数单元ALU\"></a>算数单元ALU</h3><p>计算需求：加、减、或、相等。不过相等可以用减法与判断全0代替。</p>\n<h4 id=\"减法运算\"><a href=\"#减法运算\" class=\"headerlink\" title=\"减法运算\"></a>减法运算</h4><p>计算&amp;Y=A-B&amp;可以等价为计算<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.443ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 6384 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1040.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2096.6,0)\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3068.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4069,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4458,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5236,0)\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5995,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container><br>利用补码的计算规则可以得到：<br><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24.017ex\" height=\"2.299ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -934 10615.4 1016\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1040.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2096.6,0)\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3068.8,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4069,0)\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5105.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6161.6,0)\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7133.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(8134,0)\"><g data-mml-node=\"mover\"><g data-mml-node=\"mi\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(462.8,244) translate(-250 0)\"><path data-c=\"AF\" d=\"M69 544V590H430V544H69Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(9115.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(10115.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container></p>\n<p>因此可以用加法器构造减法，对输入取反之后cin作为进位置1：<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co12.png\" alt=\"sub\"></p>\n<h4 id=\"相等\"><a href=\"#相等\" class=\"headerlink\" title=\"相等\"></a>相等</h4><p>先执行减法，之后介入一个判断为0的电路即可，其中一种实现是利用<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"23.13ex\" height=\"1.717ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -677 10223.3 759\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1222.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2222.4,0)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2944.7,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3944.9,0)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4667.1,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5667.3,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6389.6,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(7389.8,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8167.6,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(9223.3,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(500,0)\"></path></g></g></g></svg></mjx-container>个或门实现的：<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co13.png\" alt=\"beq\"></p>\n<h4 id=\"集成\"><a href=\"#集成\" class=\"headerlink\" title=\"集成\"></a>集成</h4><p><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co14.png\" alt=\"jicheng\"></p>\n<ul>\n<li>M1：0对于加法，1对应减法</li>\n<li>M2：0对应取加减法结果，1对应取OR的结果</li>\n<li>Cin：执行加法的时候取0，减法的时候取1</li>\n<li>F：功能控制，如下</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">F</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>2'b00</code></td>\n<td align=\"center\">加</td>\n</tr>\n<tr>\n<td align=\"center\"><code>2'b01</code></td>\n<td align=\"center\">减</td>\n</tr>\n<tr>\n<td align=\"center\"><code>2'b10</code></td>\n<td align=\"center\">或</td>\n</tr>\n</tbody></table>\n<h4 id=\"Verilog建模\"><a href=\"#Verilog建模\" class=\"headerlink\" title=\"Verilog建模\"></a>Verilog建模</h4><div class=\"language-verilog\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">verilog</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F92672\">`define</span><span style=\"color: #F8F8F2\"> ALU_ADDU </span><span style=\"color: #AE81FF\">2'b00</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">`define</span><span style=\"color: #F8F8F2\"> ALU_SUBU </span><span style=\"color: #AE81FF\">2'b01</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">`define</span><span style=\"color: #F8F8F2\"> ALU_OR   </span><span style=\"color: #AE81FF\">2'b10</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #66D9EF; font-style: italic\">module</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #A6E22E; text-decoration: underline\">ALU4</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">3</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]a,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">3</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]b,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">2</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]op,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #F92672\">output</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">3</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]c);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">assign</span><span style=\"color: #F8F8F2\"> c </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> (op </span><span style=\"color: #F92672\">==</span><span style=\"color: #F8F8F2\"> ALU_ADDU)? (a </span><span style=\"color: #F92672\">+</span><span style=\"color: #F8F8F2\"> b) :</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">               (op </span><span style=\"color: #F92672\">==</span><span style=\"color: #F8F8F2\"> ALU_SUBU)? (a </span><span style=\"color: #F92672\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #F92672\">~</span><span style=\"color: #F8F8F2\">b </span><span style=\"color: #F92672\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #AE81FF\">1</span><span style=\"color: #F8F8F2\">) :</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">               (op </span><span style=\"color: #F92672\">==</span><span style=\"color: #F8F8F2\"> ALU_OR)? (a </span><span style=\"color: #F92672\">|</span><span style=\"color: #F8F8F2\"> b) :</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">               </span><span style=\"color: #AE81FF\">4'b0000</span><span style=\"color: #F8F8F2\">; </span><span style=\"color: #88846F\">// 保留</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #66D9EF; font-style: italic\">endmodule</span></span></code></pre></div><h2 id=\"组装数据通路\"><a href=\"#组装数据通路\" class=\"headerlink\" title=\"组装数据通路\"></a>组装数据通路</h2><ul>\n<li>每条指令都有各自的功能需求，对应的功能部件及其连接关系也是不同的。</li>\n<li>数据通路就是所有功能部件及其连接关系的集合。</li>\n</ul>\n<h3 id=\"取指令\"><a href=\"#取指令\" class=\"headerlink\" title=\"取指令\"></a>取指令</h3><ul>\n<li>PC驱动IM取出指令</li>\n<li>PC驱动NPC，得到新的地址（比如PC+4）之后更新到PC里面</li>\n</ul>\n<p><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co15.png\" alt=\"if\"></p>\n<h3 id=\"指令分解\"><a href=\"#指令分解\" class=\"headerlink\" title=\"指令分解\"></a>指令分解</h3><p>其实就是和之前讲的<strong>域</strong>一样，把指令分成N个域，比如这样：</p>\n<div class=\"language-verilog\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">verilog</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #88846F\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">assign</span><span style=\"color: #F8F8F2\"> funct </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> Instr[</span><span style=\"color: #AE81FF\">5</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">assign</span><span style=\"color: #F8F8F2\"> imm16 </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> Instr[</span><span style=\"color: #AE81FF\">15</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">assign</span><span style=\"color: #F8F8F2\"> imm26 </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> Instr[</span><span style=\"color: #AE81FF\">25</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #88846F\">// ...</span></span></code></pre></div><p><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co16.png\" alt=\"split\"></p>\n<h3 id=\"ADDU-SUB\"><a href=\"#ADDU-SUB\" class=\"headerlink\" title=\"ADDU & SUB\"></a>ADDU &amp; SUB</h3><p>ADDU: <code>R[rd]&lt;-R[rs]+R[rt]</code><br>需要一个寄存器堆和ALU组合，RF要求两路输出和一路写回信号，如下：<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co17.png\" alt=\"addsub\"><br>当然rs，rt，rd不要搞混了，得按顺序来，并且写入使能RFWr应该置高电位，保证能够写入。</p>\n<h3 id=\"ORI\"><a href=\"#ORI\" class=\"headerlink\" title=\"ORI\"></a>ORI</h3><p>ORI:<code>R[rt]&lt;-R[rs] OR zero_ext(imm16)</code><br><code>ori</code>里面包含16位立即数，较为特殊，根据RTL来看需要进行无符号数的0拓展，从16位补高位的0到32位：</p>\n<div class=\"language-verilog\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">verilog</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #66D9EF; font-style: italic\">module</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #A6E22E; text-decoration: underline\">EXT</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">15</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]Imm16,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">           </span><span style=\"color: #F92672\">output</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">31</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]Ext);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">assign</span><span style=\"color: #F8F8F2\"> Ext </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #F92672\">&lt;!--</span><span style=\"color: #F8F8F2\">swig￼</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F92672\">--&gt;</span><span style=\"color: #F8F8F2\">, Imm16};</span></span>\n<span class=\"line\"><span style=\"color: #66D9EF; font-style: italic\">endmodule</span></span></code></pre></div><p>我们对之前的数据通路加上一个刚写好的EXT，以及两个MUX，一个（WRSel）是为了写入到rt，另一个（BSel）是为了作为ALU的输入。<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co18.png\" alt=\"ori\"></p>\n<h3 id=\"LW\"><a href=\"#LW\" class=\"headerlink\" title=\"LW\"></a>LW</h3><p>LW:<code>R[rt]&lt;-MEM[R[rs]+sign_ext(imm16)]</code><br>分析LW的RTL，由于需要正负偏移位的立即数imm16，但是计算的时候必须32位，因此需要对imm16进行有符号数的拓展：<br>需要加入EXT的控制信号EXTOp（保证<strong>高内聚，低耦合</strong>）</p>\n<div class=\"language-verilog\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">verilog</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F92672\">`define</span><span style=\"color: #F8F8F2\"> ZEXT </span><span style=\"color: #AE81FF\">0</span></span>\n<span class=\"line\"><span style=\"color: #66D9EF; font-style: italic\">module</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #A6E22E; text-decoration: underline\">EXT</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">15</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]Imm16,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">           </span><span style=\"color: #F92672\">output</span><span style=\"color: #F8F8F2\"> [</span><span style=\"color: #AE81FF\">31</span><span style=\"color: #F8F8F2\">:</span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">]Ext,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">           </span><span style=\"color: #F92672\">input</span><span style=\"color: #F8F8F2\"> EXTOp);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">assign</span><span style=\"color: #F8F8F2\"> Ext </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> (EXTOp </span><span style=\"color: #F92672\">==</span><span style=\"color: #F8F8F2\"> `ZEXT)? </span><span style=\"color: #F92672\">&lt;!--</span><span style=\"color: #F8F8F2\">swig￼</span><span style=\"color: #AE81FF\">1</span><span style=\"color: #F92672\">--&gt;</span><span style=\"color: #F8F8F2\">, Imm16}:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                                   </span><span style=\"color: #F92672\">&lt;!--</span><span style=\"color: #F8F8F2\">swig￼</span><span style=\"color: #AE81FF\">2</span><span style=\"color: #F92672\">--&gt;</span><span style=\"color: #F8F8F2\">, Imm16};</span></span>\n<span class=\"line\"><span style=\"color: #66D9EF; font-style: italic\">endmodule</span></span></code></pre></div><p>我们修改EXT之后加入EXTOp信号，但是对于LW来说还需要数据存储，也就是DM，还需要回写到寄存器堆里面，因此我们继续修改数据通路：<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co19.png\" alt=\"lw\"></p>\n<h3 id=\"SW\"><a href=\"#SW\" class=\"headerlink\" title=\"SW\"></a>SW</h3><p>SW:<code>MEM[R[rs]+sign_ext(imm16)]&lt;-R[rt]</code><br>与<code>lw</code>相反的是写入方向，只需要把寄存器堆的第二个输出RD2，也就是从rt取出来的值写道数据存储器的WD即可：<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co20.png\" alt=\"sw\"></p>\n<h3 id=\"BEQ\"><a href=\"#BEQ\" class=\"headerlink\" title=\"BEQ\"></a>BEQ</h3><p>我们之前已经折腾过ALU了，让ALU实现了0的比较功能，那么这里只需要把结果，也就是zero信号传给NPC即可：<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co21.png\" alt=\"beq\"></p>\n<p>BEQ(包含了一点NPC):</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F92672\">if</span><span style=\"color: #F8F8F2\"> (R[rs] </span><span style=\"color: #F92672\">==</span><span style=\"color: #F8F8F2\"> R[rt])</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    PC </span><span style=\"color: #F92672\">&lt;-</span><span style=\"color: #F8F8F2\"> PC </span><span style=\"color: #F92672\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #AE81FF\">4</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #F92672\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #A6E22E\">sign_ext</span><span style=\"color: #F8F8F2\">(imm16 </span><span style=\"color: #F92672\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #AE81FF\">2</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F92672\">else</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    PC </span><span style=\"color: #F92672\">&lt;-</span><span style=\"color: #F8F8F2\"> PC </span><span style=\"color: #F92672\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #AE81FF\">4</span><span style=\"color: #F8F8F2\">;</span></span></code></pre></div><h3 id=\"NPC\"><a href=\"#NPC\" class=\"headerlink\" title=\"NPC\"></a>NPC</h3><p>对于NPC来说，除了让PC直接加上四，还需要考虑<code>beq</code>指令，我们上文已经提到过了：<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co22.png\" alt=\"npc\"></p>\n<p>其中Br信号为beq指令标志，1代表指令是beq，0代表否。那么当Br和zero都是1的时候才会使用MUX的1号通道，将imm16拓展，和PC相加得到下一条跳转后的指令；否则，Br和zero至少有一个为1的时候，说明条件不满足，那么顺序执行<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.315ex\" height=\"1.781ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 3233.4 787\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(751,0)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1733.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2733.4,0)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g></g></svg></mjx-container>指令即可。</p>\n<h3 id=\"组装！\"><a href=\"#组装！\" class=\"headerlink\" title=\"组装！\"></a>组装！</h3><p><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co23.png\" alt=\"assemble\"></p>\n<h2 id=\"控制介绍\"><a href=\"#控制介绍\" class=\"headerlink\" title=\"控制介绍\"></a>控制介绍</h2><p>这部分其实就是反推控制信号的过程。<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os8/co24.png\" alt=\"control\"></p>\n<ul>\n<li>EXTOp：0代表无符号补全，1代表有符号补全</li>\n<li>BSel：0代表从RD2输入到ALU，1代表采用imm16拓展后的数</li>\n<li>ALUOp：区分<code>add</code>和<code>sub</code>以及<code>or</code></li>\n<li>Br：beq采用信号，0代表直接PC+4，1代表采用branch结果</li>\n<li>DMWr：1代表可以写入数据存储器，0不行</li>\n<li>WDSel：0代表从ALU输出写入寄存器，1代表从DM读入寄存器</li>\n<li>WRSel：0代表写入到rt对于寄存器，1代表写入rd对应寄存器</li>\n<li>RFWr：1代表能够写入寄存器，0代表无法写入</li>\n</ul>\n","feature":false,"text":"L8-MIPS数据通路，这必须得先学一下Verilog才行，不然看不懂.JPG...","permalink":"/post/buaa-co-pre-8","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"北航计组","slug":"北航计组","count":10,"path":"api/categories/北航计组.json"},{"name":"学习笔记","slug":"北航计组/学习笔记","count":10,"path":"api/categories/北航计组/学习笔记.json"}],"tags":[{"name":"计算机组成原理","slug":"计算机组成原理","count":10,"path":"api/tags/计算机组成原理.json"},{"name":"CPU","slug":"CPU","count":3,"path":"api/tags/CPU.json"},{"name":"MIPS","slug":"MIPS","count":6,"path":"api/tags/MIPS.json"},{"name":"数据通路","slug":"数据通路","count":2,"path":"api/tags/数据通路.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#MIPS%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF\"><span class=\"toc-text\">MIPS数据通路</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%B5%E8%84%91%E7%9A%84%E4%BA%94%E4%B8%AA%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">电脑的五个组件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">处理器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MIPS%E7%9A%84%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%8C%87%E4%BB%A4%E5%AD%90%E9%9B%86\"><span class=\"toc-text\">MIPS的轻量级指令子集</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%84%E5%AD%98%E5%99%A8%E4%BC%A0%E9%80%92%E8%AF%AD%E8%A8%80\"><span class=\"toc-text\">寄存器传递语言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CPU%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">CPU开发过程</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">单周期CPU设计模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E9%9B%86%E5%8A%9F%E8%83%BD%E9%9C%80%E6%B1%82\"><span class=\"toc-text\">指令集功能需求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">数据通路的抽象模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E5%8F%96%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">第一步：取指令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E8%AF%91%E7%A0%81\"><span class=\"toc-text\">第二步：译码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">第三步：执行</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%9A%E8%AE%BF%E5%AD%98\"><span class=\"toc-text\">第四步：访存</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%94%E6%AD%A5%EF%BC%9A%E5%9B%9E%E5%86%99\"><span class=\"toc-text\">第五步：回写</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF%E5%9F%BA%E7%A1%80%E9%83%A8%E4%BB%B6%E5%BB%BA%E6%A8%A1\"><span class=\"toc-text\">数据通路基础部件建模</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MUX%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">MUX设计</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">寄存器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">1位寄存器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#32%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">32位寄存器</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PC%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8\"><span class=\"toc-text\">PC程序计数器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#NPC%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">NPC组件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RF%E5%AF%84%E5%AD%98%E5%99%A8%E5%A0%86\"><span class=\"toc-text\">RF寄存器堆</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E5%AD%98%E5%82%A8%E5%99%A8IM\"><span class=\"toc-text\">指令存储器IM</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E5%99%A8DM\"><span class=\"toc-text\">数据存储器DM</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%95%B0%E5%8D%95%E5%85%83ALU\"><span class=\"toc-text\">算数单元ALU</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%87%8F%E6%B3%95%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">减法运算</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E7%AD%89\"><span class=\"toc-text\">相等</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9B%86%E6%88%90\"><span class=\"toc-text\">集成</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Verilog%E5%BB%BA%E6%A8%A1\"><span class=\"toc-text\">Verilog建模</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%84%E8%A3%85%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF\"><span class=\"toc-text\">组装数据通路</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%96%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">取指令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E5%88%86%E8%A7%A3\"><span class=\"toc-text\">指令分解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ADDU-SUB\"><span class=\"toc-text\">ADDU &amp; SUB</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ORI\"><span class=\"toc-text\">ORI</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#LW\"><span class=\"toc-text\">LW</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SW\"><span class=\"toc-text\">SW</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BEQ\"><span class=\"toc-text\">BEQ</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#NPC\"><span class=\"toc-text\">NPC</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E8%A3%85%EF%BC%81\"><span class=\"toc-text\">组装！</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">控制介绍</span></a></li></ol></li></ol>","author":{"name":"大仓鼠","slug":"blog-author","avatar":"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/%E7%BD%91%E7%AB%99%E7%B4%A0%E6%9D%90%E5%9B%BE%E7%89%87/%E5%A4%B4%E5%83%8Flogo/head.jpg","link":"/","description":"我的博客（隐藏版）","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"北航计组-预习9-单周期数据通路工程化方法","uid":"c3f30e18f1c39e433750df61f245507c","slug":"buaa-co-pre-9","date":"2024-08-17T16:00:00.000Z","updated":"2024-08-24T14:33:38.438Z","comments":true,"path":"api/articles/buaa-co-pre-9.json","keywords":null,"cover":"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co1.jpg?x-oss-process=image/resize,w_600","text":"L9-CPU形式建模综合方法－－单周期数据通路，咱终于开始手搓CPU了吗？...","permalink":"/post/buaa-co-pre-9","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"北航计组","slug":"北航计组","count":10,"path":"api/categories/北航计组.json"},{"name":"学习笔记","slug":"北航计组/学习笔记","count":10,"path":"api/categories/北航计组/学习笔记.json"}],"tags":[{"name":"计算机组成原理","slug":"计算机组成原理","count":10,"path":"api/tags/计算机组成原理.json"},{"name":"CPU","slug":"CPU","count":3,"path":"api/tags/CPU.json"},{"name":"MIPS","slug":"MIPS","count":6,"path":"api/tags/MIPS.json"},{"name":"数据通路","slug":"数据通路","count":2,"path":"api/tags/数据通路.json"}],"author":{"name":"大仓鼠","slug":"blog-author","avatar":"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/%E7%BD%91%E7%AB%99%E7%B4%A0%E6%9D%90%E5%9B%BE%E7%89%87/%E5%A4%B4%E5%83%8Flogo/head.jpg","link":"/","description":"我的博客（隐藏版）","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},"next_post":{"title":"北航计组-预习7-机器语言3","uid":"a9e7097f73f9d5d3ab8d9233687f3fe7","slug":"buaa-co-pre-7","date":"2024-08-08T16:00:00.000Z","updated":"2024-08-18T03:15:31.413Z","comments":true,"path":"api/articles/buaa-co-pre-7.json","keywords":null,"cover":"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co1.jpg?x-oss-process=image/resize,w_600","text":"L7-机器语言3，学完之后总有种啥都不会的感觉（划掉）...","permalink":"/post/buaa-co-pre-7","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"北航计组","slug":"北航计组","count":10,"path":"api/categories/北航计组.json"},{"name":"学习笔记","slug":"北航计组/学习笔记","count":10,"path":"api/categories/北航计组/学习笔记.json"}],"tags":[{"name":"计算机组成原理","slug":"计算机组成原理","count":10,"path":"api/tags/计算机组成原理.json"},{"name":"MIPS","slug":"MIPS","count":6,"path":"api/tags/MIPS.json"},{"name":"汇编","slug":"汇编","count":3,"path":"api/tags/汇编.json"}],"author":{"name":"大仓鼠","slug":"blog-author","avatar":"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/%E7%BD%91%E7%AB%99%E7%B4%A0%E6%9D%90%E5%9B%BE%E7%89%87/%E5%A4%B4%E5%83%8Flogo/head.jpg","link":"/","description":"我的博客（隐藏版）","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}