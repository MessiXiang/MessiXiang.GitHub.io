{"title":"北航计组-预习6-机器语言2","uid":"3a8b96be6df1404e93229a67455be352","slug":"buaa-co-pre-6","date":"2024-08-06T16:00:00.000Z","updated":"2024-08-15T05:36:38.404Z","comments":true,"path":"api/articles/buaa-co-pre-6.json","keywords":null,"cover":"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co1.jpg?x-oss-process=image/resize,w_600","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>MIPS按照<strong>字节</strong>编址……给哥们记住了，不是bit，是byte！</p></blockquote>\n<h1 id=\"机器语言2\"><a href=\"#机器语言2\" class=\"headerlink\" title=\"机器语言2\"></a>机器语言2</h1><h2 id=\"不等式\"><a href=\"#不等式\" class=\"headerlink\" title=\"不等式\"></a>不等式</h2><p>数学上我们有四个不等关系：<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.09ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.76ex\" height=\"1.312ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -540 778 580\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path></g></g></g></svg></mjx-container> <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.09ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.76ex\" height=\"1.312ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -540 778 580\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"3E\" d=\"M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z\"></path></g></g></g></svg></mjx-container> <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.312ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.76ex\" height=\"1.751ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -636 778 774\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"2264\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g></g></g></svg></mjx-container> <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.312ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.76ex\" height=\"1.751ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -636 778 774\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"2265\" d=\"M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g></g></g></svg></mjx-container></p>\n<p>但是在MIPS里面，我们只需要一条指令（配合<code>beq</code> <code>bne</code> <code>$0</code>）就可以实现这四种关系。</p>\n<h3 id=\"小于指令\"><a href=\"#小于指令\" class=\"headerlink\" title=\"小于指令\"></a>小于指令</h3><p>Set on Less Than，即<code>slt</code>，用法和其他指令也差不多，即<code>slt dst,src1,src2</code>，当<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.09ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.402ex\" height=\"1.597ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 5039.6 706\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(469,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(920,0)\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1353,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2130.8,0)\"><path data-c=\"3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3186.6,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3655.6,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4106.6,0)\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4539.6,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></svg></mjx-container>的时候，就会往<code>dst</code>写入<code>1</code>，否则写入<code>0</code>。</p>\n<h3 id=\"其他符号的实现\"><a href=\"#其他符号的实现\" class=\"headerlink\" title=\"其他符号的实现\"></a>其他符号的实现</h3><p>以下<code>a</code>均存在<code>$s1</code>里面，<code>b</code>均存在<code>$s2</code>里面：</p>\n<h4 id=\"实现小于\"><a href=\"#实现小于\" class=\"headerlink\" title=\"实现小于\"></a>实现小于</h4><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F92672\">if</span><span style=\"color: #F8F8F2\">(a </span><span style=\"color: #F92672\">&lt;</span><span style=\"color: #F8F8F2\"> b){</span></span>\n<span class=\"line\"><span style=\"color: #88846F\">    /* then */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">slt   $t0, $s1, $s2</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">bne   $t0, </span><span style=\"color: #AE81FF\">$0</span><span style=\"color: #F8F8F2\">, then</span></span></code></pre></div><h4 id=\"实现大于等于\"><a href=\"#实现大于等于\" class=\"headerlink\" title=\"实现大于等于\"></a>实现大于等于</h4><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F92672\">if</span><span style=\"color: #F8F8F2\">(a </span><span style=\"color: #F92672\">&gt;=</span><span style=\"color: #F8F8F2\"> b){</span></span>\n<span class=\"line\"><span style=\"color: #88846F\">    /* then */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">slt   $t0, $s1, $s2</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">beq   $t0, </span><span style=\"color: #AE81FF\">$0</span><span style=\"color: #F8F8F2\">, then</span></span></code></pre></div><h4 id=\"实现大于\"><a href=\"#实现大于\" class=\"headerlink\" title=\"实现大于\"></a>实现大于</h4><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F92672\">if</span><span style=\"color: #F8F8F2\">(a </span><span style=\"color: #F92672\">&gt;</span><span style=\"color: #F8F8F2\"> b){</span></span>\n<span class=\"line\"><span style=\"color: #88846F\">    /* then */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">slt   $t0, $s2, $s1</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">bne   $t0, </span><span style=\"color: #AE81FF\">$0</span><span style=\"color: #F8F8F2\">, then</span></span></code></pre></div><h4 id=\"实现小于等于\"><a href=\"#实现小于等于\" class=\"headerlink\" title=\"实现小于等于\"></a>实现小于等于</h4><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F92672\">if</span><span style=\"color: #F8F8F2\">(a </span><span style=\"color: #F92672\">&lt;=</span><span style=\"color: #F8F8F2\"> b){</span></span>\n<span class=\"line\"><span style=\"color: #88846F\">    /* then */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">slt   $t0, $s2, $s1</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">beq   $t0, </span><span style=\"color: #AE81FF\">$0</span><span style=\"color: #F8F8F2\">, then</span></span></code></pre></div><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>总结一下，先把带等于符号的取个反，小调等于号之后看哪一边需要小，需要小的一侧在<code>slt</code>指令里面放在src1的位置，之后根据之前是否取过反，第二个指令默认<code>bne</code>，取反就是<code>beq</code>。<em>不过这都看个人喜好，怎么用还是随你。</em></p>\n</div>\n<h3 id=\"slt的变形\"><a href=\"#slt的变形\" class=\"headerlink\" title=\"slt的变形\"></a>slt的变形</h3><ul>\n<li><code>sltu</code>，即无符号数比较。<code>sltu dst,src1,src2</code></li>\n<li><code>slti</code>，即和立即数比较。<code>slti dst,src,imm</code></li>\n<li><code>sltiu</code>，即和立即数进行无符号比较。<code>sltiu dst,src,imm</code></li>\n</ul>\n<details class=\"custom-details\">\n<summary>一些题外话</summary>\n<p>在MIPS里面signed和unsigned的意思很多样，但是万变不离其宗：</p>\n<ul>\n<li>符号位拓展：<ul>\n<li><code>lb</code>要拓展，<code>lbu</code>不拓展。</li>\n</ul>\n</li>\n<li>溢出：<ul>\n<li><code>add</code> <code>sub</code> <code>addi</code> <code>mult</code> <code>div</code>都要检测，而这几个指令后面加上<code>u</code>（即<code>addu</code>等）就不检测。</li>\n</ul>\n</li>\n<li>符号数：<ul>\n<li><code>slt</code> <code>slti</code>符号数比较，<code>sltu</code> <code>sltiu</code>是无符号数比较。</li>\n</ul>\n</li>\n</ul>\n</p>\n</details>\n<h2 id=\"伪指令\"><a href=\"#伪指令\" class=\"headerlink\" title=\"伪指令\"></a>伪指令</h2><p>MIPS里面定义了一组伪指令，使得程序更加容易编写：</p>\n<ul>\n<li>伪指令并不是真正的指令</li>\n<li>伪指令只是为了增加可读性</li>\n<li>伪指令终究会被转换为真正的指令</li>\n</ul>\n<h3 id=\"常用的伪指令\"><a href=\"#常用的伪指令\" class=\"headerlink\" title=\"常用的伪指令\"></a>常用的伪指令</h3><ul>\n<li>Move<ul>\n<li><code>move dst, src</code>，把src赋值给dst。</li>\n</ul>\n</li>\n<li>Load Address<ul>\n<li><code>la dst, label</code>，加载label对应的地址给dst。</li>\n</ul>\n</li>\n<li>Load Immediate<ul>\n<li><code>li dst, imm</code>，加载一个<strong>32位</strong>立即数给dst。</li>\n</ul>\n</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">如果你没懂为什么label是地址</p>\n<p>在汇编里面，我姑且把每一行对应的指令理解成这行所在的端被移动至某个cpu寻址寻的到的地方开始运行，而标号标定的就是这一行（或者最近的下一行）对应的地址，这个地址是由端的基地址加上偏移得到的，从而<code>j</code>或者<code>beq</code> <code>bne</code>之类的指令可以实现跳转。</p>\n</div>\n<h3 id=\"汇编寄存器\"><a href=\"#汇编寄存器\" class=\"headerlink\" title=\"汇编寄存器\"></a>汇编寄存器</h3><p>由于伪指令的存在，许多伪指令的实现都需要<strong>多条</strong>真实指令，并且可能需要至多一个中间寄存器来传递数据，MIPS保留了<code>$at</code>，也就是<code>$1</code>作为汇编器专用的寄存器，其他程序不应该再去专门使用这个<code>$at</code>寄存器。</p>\n<h3 id=\"TAL和MAL\"><a href=\"#TAL和MAL\" class=\"headerlink\" title=\"TAL和MAL\"></a>TAL和MAL</h3><ul>\n<li>TAL：True Assembly Language<ul>\n<li>真实的指令，计算机可以理解与执行。</li>\n</ul>\n</li>\n<li>MAL：MIPS Assembly Language<ul>\n<li>除了TAL的部分，还包含伪指令，每条MAL对应一条或者多条TAL指令。</li>\n</ul>\n</li>\n</ul>\n<p>由此可见，<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.09ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.463ex\" height=\"1.71ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -716 5950.6 756\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(704,0)\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1454,0)\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2412.8,0)\"><path data-c=\"2282\" d=\"M84 250Q84 372 166 450T360 539Q361 539 370 539T395 539T430 540T475 540T524 540H679Q694 532 694 520Q694 511 681 501L522 500H470H441Q366 500 338 496T266 472Q244 461 224 446T179 404T139 337T124 250V245Q124 157 185 89Q244 25 328 7Q348 2 366 2T522 0H681Q694 -10 694 -20Q694 -32 679 -40H526Q510 -40 480 -40T434 -41Q350 -41 289 -25T172 45Q84 127 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3468.6,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4519.6,0)\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5269.6,0)\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"></path></g></g></g></svg></mjx-container></p>\n<h2 id=\"实现函数\"><a href=\"#实现函数\" class=\"headerlink\" title=\"实现函数\"></a>实现函数</h2><h3 id=\"一般步骤\"><a href=\"#一般步骤\" class=\"headerlink\" title=\"一般步骤\"></a>一般步骤</h3><ol>\n<li>调用者把参数放置在某个地方以便函数能访问（<code>$a0</code>~`$a3`）</li>\n<li>调用者转移控制给被调用的函数（<code>jal</code>）</li>\n<li>函数获取局部变量对应的空间</li>\n<li>函数执行具体功能</li>\n<li>函数把返回值放置在某个地方，然后恢复使用的资源（<code>$v0</code>~`$v1`）</li>\n<li>返回控制给调用者</li>\n</ol>\n<h3 id=\"函数相关寄存器\"><a href=\"#函数相关寄存器\" class=\"headerlink\" title=\"函数相关寄存器\"></a>函数相关寄存器</h3><p>我们尽量用寄存器，毕竟主存比较慢，因此需要几个寄存器专门用于传递参数。</p>\n<ul>\n<li>传递参数进入的寄存器：<code>$s4</code>-<code>$s7</code>这四个，分别被命名为<code>$a0</code>-<code>$a3</code></li>\n<li>返回值的寄存器：<code>$s2</code>和<code>$s3</code>，名字叫做<code>$v0</code>和<code>$v1</code></li>\n<li>返回地址寄存器：用来保存<strong>调用者</strong>的地址，是<code>$s31</code>，叫做<code>$ra</code></li>\n</ul>\n<h3 id=\"函数调用指令\"><a href=\"#函数调用指令\" class=\"headerlink\" title=\"函数调用指令\"></a>函数调用指令</h3><ul>\n<li>Jump and Link：<code>jal</code><ul>\n<li>用法：<code>jal label</code></li>\n<li>把<code>jal</code>的下一条指令保存在<code>$ra</code>，之后跳转到<code>label</code></li>\n<li>一般用于调用函数</li>\n</ul>\n</li>\n<li>Jump Register：<code>jr</code><ul>\n<li>用法：<code>jr src</code></li>\n<li>无条件跳转到<code>src</code>寄存器保存的地址，一般我们就用<code>$ra</code></li>\n<li>一般用于从函数返回</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"PC寄存器\"><a href=\"#PC寄存器\" class=\"headerlink\" title=\"PC寄存器\"></a>PC寄存器</h3><p>Program Counter是一个特殊寄存器，保存的是当前正在进行的指令的地址。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<ul>\n<li>PC寄存器是冯氏体系结构计算机的关键环节。</li>\n<li>MIPS里面PC对于程序员不可访问，但是<code>jal</code>指令可以访问。</li>\n<li><code>jal</code>保存到<code>$ra</code>寄存器的是<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.315ex\" height=\"1.781ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 3233.4 787\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(751,0)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1733.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2733.4,0)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g></g></svg></mjx-container>，而不是<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.419ex\" height=\"1.645ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 1511 727\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(751,0)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g></g></g></svg></mjx-container>本身，不然<code>jr</code>跳回来的时候又到了<code>jal</code>了，形成<strong>死循环</strong>。</li>\n</ul>\n\n</div>\n<h3 id=\"函数调用示例\"><a href=\"#函数调用示例\" class=\"headerlink\" title=\"函数调用示例\"></a>函数调用示例</h3><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">...</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">c </span><span style=\"color: #F92672\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #A6E22E\">sum</span><span style=\"color: #F8F8F2\">(a, b);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #66D9EF; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #A6E22E\">sum</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #66D9EF; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FD971F; font-style: italic\">x</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #66D9EF; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FD971F; font-style: italic\">y</span><span style=\"color: #F8F8F2\">){</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">return</span><span style=\"color: #F8F8F2\"> x </span><span style=\"color: #F92672\">+</span><span style=\"color: #F8F8F2\"> y;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #88846F\"># a-&gt;$s0 b-&gt;$s1 c-&gt;$s2</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">...</span></span>\n<span class=\"line\"><span style=\"color: #AE81FF\">1000</span><span style=\"color: #F8F8F2\">  addi  $a0, $s0, </span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">  </span><span style=\"color: #88846F\"> # x = a</span></span>\n<span class=\"line\"><span style=\"color: #AE81FF\">1004</span><span style=\"color: #F8F8F2\">  addi  $a1, $s1, </span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">  </span><span style=\"color: #88846F\"> # y = b</span></span>\n<span class=\"line\"><span style=\"color: #AE81FF\">1008</span><span style=\"color: #F8F8F2\">  jal   sum</span></span>\n<span class=\"line\"><span style=\"color: #AE81FF\">1012</span><span style=\"color: #F8F8F2\">  addi  $a2, $v0, </span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">  </span><span style=\"color: #88846F\"> # c = sum(a,b)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">...</span></span>\n<span class=\"line\"><span style=\"color: #AE81FF\">2000</span><span style=\"color: #F8F8F2\">  </span><span style=\"color: #A6E22E\">sum:</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #F92672\">add</span><span style=\"color: #F8F8F2\">  $v0, $a0, $a1  </span><span style=\"color: #88846F\"> # $v0 = x + y</span></span>\n<span class=\"line\"><span style=\"color: #AE81FF\">2004</span><span style=\"color: #F8F8F2\">  jr  $ra                  </span><span style=\"color: #88846F\"> # return $v0</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">...</span></span></code></pre></div><h3 id=\"保存和恢复寄存器\"><a href=\"#保存和恢复寄存器\" class=\"headerlink\" title=\"保存和恢复寄存器\"></a>保存和恢复寄存器</h3><h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>由于寄存器很少，只用这点寄存器来编写程序属实是巧妇难为无米之炊，并且由于你只有一个<code>$ra</code>，如果出现了函数的嵌套调用，这个寄存器会被新的调用覆盖，导致无法跳转回最初的调用者，因此我们必须像个办法来<strong>保存寄存器</strong>到某个地方。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>寄存器保存在<strong>栈</strong>里面！</p>\n</div>\n<p>因此我们保留了一个寄存器，对应<code>$29</code>，名字叫做<code>$sp</code>，即栈指针寄存器，指向栈的底端。（stack pointer）</p>\n<h4 id=\"主存分配的基本方案\"><a href=\"#主存分配的基本方案\" class=\"headerlink\" title=\"主存分配的基本方案\"></a>主存分配的基本方案</h4><p><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os6/co1.png\" alt=\"mem\"><br>stack frame即栈帧，实际上就是把<code>$sp</code>朝地址0方向移动之后得到的空间，并且由于栈帧容量是按照byte字节（=8bit）来算的，因此其容量就等于需要保存到寄存器数量乘以四（每个寄存器4个bytes）。<br>当你移动了栈底指针后，就可以用这个寄存器加上偏移量的方式来表示你所需的保存过的寄存器了。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>你可能注意到，这里的表示方法类似于从主存里面取数据的方法，实际上栈就是保存在主存里面的，当然表示方法也一样。</p>\n<p>以及，虽然看起来空间无穷大，但是实际上还是有限的，这也是为什么你在c语言里面递归调用次数太多的时候会爆栈。</p>\n</div>\n<p>当然，由于偏移量都是你自己设置的，入栈之后一定记得及时出栈，并且恢复栈底指针位置，不然后面偏移量都算不清楚。</p>\n<h4 id=\"多重调用函数示例\"><a href=\"#多重调用函数示例\" class=\"headerlink\" title=\"多重调用函数示例\"></a>多重调用函数示例</h4><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #66D9EF; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #A6E22E\">sumSquare</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #66D9EF; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FD971F; font-style: italic\">x</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #66D9EF; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FD971F; font-style: italic\">y</span><span style=\"color: #F8F8F2\">){</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #A6E22E\">mult</span><span style=\"color: #F8F8F2\">(x, x) </span><span style=\"color: #F92672\">+</span><span style=\"color: #F8F8F2\"> y;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #A6E22E\">sumSquare:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    addi    $sp, $sp, -</span><span style=\"color: #AE81FF\">8</span><span style=\"color: #F8F8F2\">   </span><span style=\"color: #88846F\"> # 移动栈底往下8个字节</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    sw      $ra, </span><span style=\"color: #AE81FF\">4</span><span style=\"color: #F8F8F2\">($sp)    </span><span style=\"color: #88846F\"> # 保存返回地址寄存器</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    sw      $a1, </span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">($sp)    </span><span style=\"color: #88846F\"> # 保存y变量</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    move    $a1, $a0       </span><span style=\"color: #88846F\"> # 传入mult的第二个参数设置为x</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    jal     mult           </span><span style=\"color: #88846F\"> # 调用mult，此时$ra保存了下一行指令</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    lw      $a1, </span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">($sp)    </span><span style=\"color: #88846F\"> # 取回y变量</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #F92672\">add</span><span style=\"color: #F8F8F2\">     $v0, $v0, $a1  </span><span style=\"color: #88846F\"> # 计算mult(x,x)+y并保存到返回值里面</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    lw      $ra, </span><span style=\"color: #AE81FF\">4</span><span style=\"color: #F8F8F2\">($sp)    </span><span style=\"color: #88846F\"> # 取回返回地址寄存器</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    addi    $sp, $sp, </span><span style=\"color: #AE81FF\">8</span><span style=\"color: #F8F8F2\">    </span><span style=\"color: #88846F\"> # 栈底上移恢复原位</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    jr      $ra            </span><span style=\"color: #88846F\"> # 返回原调用者</span></span>\n<span class=\"line\"><span style=\"color: #A6E22E\">mult:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    mult    $a0, $a1       </span><span style=\"color: #88846F\"> # 乘法运算，ao和a1都是x</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    mflo    $v0            </span><span style=\"color: #88846F\"> # 低32位传回去，高32位先不管了……</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    jr      $ra            </span><span style=\"color: #88846F\"> # 返回调用者sumSquare</span></span></code></pre></div><h3 id=\"函数的架构\"><a href=\"#函数的架构\" class=\"headerlink\" title=\"函数的架构\"></a>函数的架构</h3><p>我们上面已经了解了如何嵌套调用，因此我们可以看到一个函数如何构成的：</p>\n<div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">############ 施法前摇 ############</span></span>\n<span class=\"line\"><span style=\"color: #A6E22E\">func_label:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    addi    $sp, $sp, -framesize   </span><span style=\"color: #88846F\"> # 下移栈底</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    sw      $ra, [framesize-</span><span style=\"color: #AE81FF\">4</span><span style=\"color: #F8F8F2\">]($sp)</span><span style=\"color: #88846F\"> # $ra保存到新区域的顶部</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">   </span><span style=\"color: #88846F\"> # 保存其他传入的参数之类的（比如$s0-$s7）</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">############ 施法进行 ############</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">   </span><span style=\"color: #88846F\"> # jal调用其他函数</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">   </span><span style=\"color: #88846F\"> # 或者函数具体内容</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">############ 施法后摇 ############</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">   </span><span style=\"color: #88846F\"> # 取回其他保存的参数</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    lw      $ra, [framesize-</span><span style=\"color: #AE81FF\">4</span><span style=\"color: #F8F8F2\">]($sp)</span><span style=\"color: #88846F\"> # 取回$ra</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    addi    $sp, $sp, framesize    </span><span style=\"color: #88846F\"> # 恢复栈底</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    jr      $ra                    </span><span style=\"color: #88846F\"> # 调用结束</span></span></code></pre></div><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">超过两重嵌套？</p>\n<p>有人可能会有疑问，欸你这万一不止两重嵌套呢，那栈底怎么移动啊，不是只有一个栈底吗？</p>\n<p>其实确实只有这一个（暂时），但是你也可以发现，我们每次调用函数需要移动栈底的时候，最后都<strong>移动回原位</strong>了的，因此对于每一层的函数，其栈底永远是同一个位置，它<strong>不会知道</strong>它调用的函数怎么动的栈底，因为对于它本身来说栈底在<code>jal</code>前后就没动过。</p>\n</div>\n<h3 id=\"局部变量和数组\"><a href=\"#局部变量和数组\" class=\"headerlink\" title=\"局部变量和数组\"></a>局部变量和数组</h3><p>由于寄存器只有32个，因此编译器绝大多数情况下不可能把函数需要的所有局部变量都分配在寄存器，因此我们还是需要移动栈底来保存局部变量。<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os6/co2.png\" alt=\"localmem\"></p>\n<p>图中比我们之前的代码似乎多保存了程序变量寄存器<code>$s0</code>到<code>$s7</code>，临时寄存器以及一些传入传出参数寄存器，其实只要用过的保存一遍就好了，和保存<code>$ra</code>没啥区别，因为<code>$ra</code>是每次<code>jal</code>调用的时候必须用到寄存器，所以至少得保存一个<code>$ra</code>。</p>\n<h2 id=\"函数调用约定\"><a href=\"#函数调用约定\" class=\"headerlink\" title=\"函数调用约定\"></a>函数调用约定</h2><h3 id=\"寄存器的保护\"><a href=\"#寄存器的保护\" class=\"headerlink\" title=\"寄存器的保护\"></a>寄存器的保护</h3><p>其实我们上文已经提到过寄存器保护的问题了，保存-调用-恢复的这个过程其实就是寄存器的保护动作，只是对于不同寄存器的保护需求和细节不一样：<br><img src=\"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os6/co3.png\" alt=\"reserve\"><br>可见分为强保护和弱保护，也比较显而易见的是强保护对于一整个函数来说都保护了，而弱保护是对于其调用的子函数来说保护了一下，不过我更喜欢叫做前者是<em>被调用者保护</em>，而后者叫做<em>调用者保护</em>，可能比较直观一些。</p>\n<p>保护机制的代码如下：<br>强保护（被调用者）</p>\n<div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #A6E22E\">func_label:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    addiu   $sp, $sp, -framesize   </span><span style=\"color: #88846F\"> # 分配栈帧</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    sw      $ra, [framesize-</span><span style=\"color: #AE81FF\">4</span><span style=\"color: #F8F8F2\">]($sp)</span><span style=\"color: #88846F\"> # 保存$ra</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    sw      $s0, [framesize-</span><span style=\"color: #AE81FF\">8</span><span style=\"color: #F8F8F2\">]($sp)</span><span style=\"color: #88846F\"> # 保存s0-s7，下略</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">   </span><span style=\"color: #88846F\"> # ...</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    sw      $s7, </span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">($sp)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">   </span><span style=\"color: #88846F\"> # 使用$s0~$s7</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">   </span><span style=\"color: #88846F\"> # 调用其他子函数</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    lw      $s7, </span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">($sp)            </span><span style=\"color: #88846F\"> # 取回$s7~$s0，下略</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">   </span><span style=\"color: #88846F\"> # ...</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    lw      $s0, [framesize-</span><span style=\"color: #AE81FF\">8</span><span style=\"color: #F8F8F2\">]($sp)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    lw      $ra, [framesize-</span><span style=\"color: #AE81FF\">4</span><span style=\"color: #F8F8F2\">]($sp)</span><span style=\"color: #88846F\"> # 取回$ra</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    addiu   $sp, $sp, framesize    </span><span style=\"color: #88846F\"> # 回收栈帧</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    jr      $ra                    </span><span style=\"color: #88846F\"> # 返回</span></span></code></pre></div><p>弱保护（调用者）：</p>\n<div class=\"language-asm\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">asm</span><pre class=\"shiki monokai\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #A6E22E\">func_label:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">   </span><span style=\"color: #88846F\"> # 当前函数其他代码</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    addiu   $sp, $sp, -framesize   </span><span style=\"color: #88846F\"> # 分配栈帧</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    sw      $t0, [framesize-</span><span style=\"color: #AE81FF\">8</span><span style=\"color: #F8F8F2\">]($sp)</span><span style=\"color: #88846F\"> # 保存t0-t7，下略</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">   </span><span style=\"color: #88846F\"> # ...</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    sw      $t7, </span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">($sp)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    jal     child_func             </span><span style=\"color: #88846F\"> # </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    lw      $t7, </span><span style=\"color: #AE81FF\">0</span><span style=\"color: #F8F8F2\">($sp)            </span><span style=\"color: #88846F\"> # 取回$t7~$t0，下略</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">   </span><span style=\"color: #88846F\"> # ...</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    lw      $t0, [framesize-</span><span style=\"color: #AE81FF\">8</span><span style=\"color: #F8F8F2\">]($sp)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    lw      $ra, [framesize-</span><span style=\"color: #AE81FF\">4</span><span style=\"color: #F8F8F2\">]($sp)</span><span style=\"color: #88846F\"> # 取回$ra</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    addiu   $sp, $sp, framesize    </span><span style=\"color: #88846F\"> # 回收栈帧</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">   </span><span style=\"color: #88846F\"> # 当前函数其他代码</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    jr      $ra                    </span><span style=\"color: #88846F\"> # 返回</span></span></code></pre></div><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><code>$t0</code>等临时寄存器可以不保护，只需要保证子函数不改变这个寄存器就行。</p>\n<p>但是<code>$s0</code>等程序员变量寄存器，如果一个函数使用了这些，就必须在进入和退出函数的时候分别保存恢复。</p>\n</div>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><ul>\n<li><code>beq</code>和<code>slt</code>可以实现各种比较（还有<code>bne</code>）</li>\n<li>伪指令增加易读性，但是可能不止对应一条真实指令，可能多条</li>\n<li>函数调用与返回（以及栈）</li>\n</ul>\n","feature":false,"text":"L6-机器语言2，继续学习关于指令的相关内容...","permalink":"/post/buaa-co-pre-6","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"北航计组","slug":"北航计组","count":8,"path":"api/categories/北航计组.json"},{"name":"学习笔记","slug":"北航计组/学习笔记","count":8,"path":"api/categories/北航计组/学习笔记.json"}],"tags":[{"name":"计算机组成原理","slug":"计算机组成原理","count":8,"path":"api/tags/计算机组成原理.json"},{"name":"MIPS","slug":"MIPS","count":4,"path":"api/tags/MIPS.json"},{"name":"汇编","slug":"汇编","count":3,"path":"api/tags/汇编.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%BA%E5%99%A8%E8%AF%AD%E8%A8%802\"><span class=\"toc-text\">机器语言2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E7%AD%89%E5%BC%8F\"><span class=\"toc-text\">不等式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E4%BA%8E%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">小于指令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E7%AC%A6%E5%8F%B7%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">其他符号的实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E5%B0%8F%E4%BA%8E\"><span class=\"toc-text\">实现小于</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E\"><span class=\"toc-text\">实现大于等于</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E5%A4%A7%E4%BA%8E\"><span class=\"toc-text\">实现大于</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8E\"><span class=\"toc-text\">实现小于等于</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#slt%E7%9A%84%E5%8F%98%E5%BD%A2\"><span class=\"toc-text\">slt的变形</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%AA%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">伪指令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BC%AA%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">常用的伪指令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B1%87%E7%BC%96%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">汇编寄存器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TAL%E5%92%8CMAL\"><span class=\"toc-text\">TAL和MAL</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">实现函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E8%88%AC%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">一般步骤</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E7%9B%B8%E5%85%B3%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">函数相关寄存器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">函数调用指令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PC%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">PC寄存器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">函数调用示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%9D%E5%AD%98%E5%92%8C%E6%81%A2%E5%A4%8D%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">保存和恢复寄存器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9B%A0\"><span class=\"toc-text\">原因</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E5%AD%98%E5%88%86%E9%85%8D%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">主存分配的基本方案</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E9%87%8D%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">多重调用函数示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E7%9A%84%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">函数的架构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">局部变量和数组</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A\"><span class=\"toc-text\">函数调用约定</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E4%BF%9D%E6%8A%A4\"><span class=\"toc-text\">寄存器的保护</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol>","author":{"name":"大仓鼠","slug":"blog-author","avatar":"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/%E7%BD%91%E7%AB%99%E7%B4%A0%E6%9D%90%E5%9B%BE%E7%89%87/%E5%A4%B4%E5%83%8Flogo/head.jpg","link":"/","description":"我的博客（隐藏版）","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"折腾笔记-hexo、Mathjax、Latex的奇妙bug","uid":"106042df361711128e93d1695c28edbf","slug":"hexo-mathjax","date":"2024-07-28T16:00:00.000Z","updated":"2024-07-29T11:38:33.576Z","comments":true,"path":"api/articles/hexo-mathjax.json","keywords":null,"cover":"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/post2/mj1.png","text":"hexo写Latex需要换行的时候经常会遇上问题，结果罪魁祸首是转义字符。...","permalink":"/post/hexo-mathjax","photos":[],"count_time":{"symbolsCount":768,"symbolsTime":"1 mins."},"categories":[{"name":"折腾笔记","slug":"折腾笔记","count":2,"path":"api/categories/折腾笔记.json"},{"name":"网页","slug":"折腾笔记/网页","count":2,"path":"api/categories/折腾笔记/网页.json"}],"tags":[{"name":"hexo","slug":"hexo","count":1,"path":"api/tags/hexo.json"},{"name":"Mathjax","slug":"Mathjax","count":1,"path":"api/tags/Mathjax.json"},{"name":"Latex","slug":"Latex","count":1,"path":"api/tags/Latex.json"}],"author":{"name":"大仓鼠","slug":"blog-author","avatar":"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/%E7%BD%91%E7%AB%99%E7%B4%A0%E6%9D%90%E5%9B%BE%E7%89%87/%E5%A4%B4%E5%83%8Flogo/head.jpg","link":"/","description":"我的博客（隐藏版）","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"北航计组-预习5-机器语言1","uid":"8a3d05455b8690208682c71c22ab04dc","slug":"buaa-co-pre-5","date":"2024-07-31T16:00:00.000Z","updated":"2024-08-15T05:36:27.327Z","comments":true,"path":"api/articles/buaa-co-pre-5.json","keywords":null,"cover":"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/buaa/buaa-os1/co1.jpg?x-oss-process=image/resize,w_600","text":"L5-机器语言1，终于似乎到正题了，别问我为什么没有L4，问就是国庆节。...","permalink":"/post/buaa-co-pre-5","photos":[],"count_time":{"symbolsCount":"8.3k","symbolsTime":"8 mins."},"categories":[{"name":"北航计组","slug":"北航计组","count":8,"path":"api/categories/北航计组.json"},{"name":"学习笔记","slug":"北航计组/学习笔记","count":8,"path":"api/categories/北航计组/学习笔记.json"}],"tags":[{"name":"计算机组成原理","slug":"计算机组成原理","count":8,"path":"api/tags/计算机组成原理.json"},{"name":"MIPS","slug":"MIPS","count":4,"path":"api/tags/MIPS.json"},{"name":"汇编","slug":"汇编","count":3,"path":"api/tags/汇编.json"}],"author":{"name":"大仓鼠","slug":"blog-author","avatar":"https://blogphoto-xyh.oss-cn-chengdu.aliyuncs.com/%E7%BD%91%E7%AB%99%E7%B4%A0%E6%9D%90%E5%9B%BE%E7%89%87/%E5%A4%B4%E5%83%8Flogo/head.jpg","link":"/","description":"我的博客（隐藏版）","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}