[{"id":"106042df361711128e93d1695c28edbf","title":"折腾笔记-hexo、Mathjax、Latex的奇妙bug","content":"前言从来没想过能有这种奇妙问题……\nbug复现我在写笔记的时候需要用到Latex写一些公式，前端用的Mathjax渲染，但是公式换行始终无法解决。\n按道理来说\\\\是可以起到换行的作用的，结果实际如下：\n代码latex\\begin{align*}\nD &amp;= (\\bar{AB})(A+\\bar{B}C) \\\\\n  &amp;= (\\bar{A}+\\bar{B})(A+\\bar{B}C) \\\\\n  &amp;= A\\bar{A}+\\bar(A)\\bar{B}C+A\\bar{B}+\\bar{B}\\bar{B}C \\\\\n  &amp;= (\\bar{A}+1)\\bar{B}C+A\\bar{B} \\\\\n  &amp;= \\bar{B}C+A\\bar{B} \\\\\n  &amp;= \\bar{B}(A+C)\n\\end{align*}现象\nbug原理和修复Mathjax其实不需要背锅，出问题的是markdown把\\\\转义成\\了，因此前端代码渲染出来的是\\的效果。所以我们需要把latex代码里面的\\\\全部替换成\\\\\\\\，由此就可以转义变成\\\\正确渲染了：\n代码latex\\begin{align*}\nD &amp;= (\\bar{AB})(A+\\bar{B}C) \\\\\\\\\n  &amp;= (\\bar{A}+\\bar{B})(A+\\bar{B}C) \\\\\\\\\n  &amp;= A\\bar{A}+\\bar(A)\\bar{B}C+A\\bar{B}+\\bar{B}\\bar{B}C \\\\\\\\\n  &amp;= (\\bar{A}+1)\\bar{B}C+A\\bar{B} \\\\\\\\\n  &amp;= \\bar{B}C+A\\bar{B} \\\\\\\\\n  &amp;= \\bar{B}(A+C)\n\\end{align*}现象\n","slug":"hexo-mathjax","date":"2024-07-28T16:00:00.000Z","categories_index":"折腾笔记,网页","tags_index":"hexo,Mathjax,Latex","author_index":"大仓鼠"},{"id":"98d48bfcc3d8d2c9c7bc42d4a7352b22","title":"北航计组-预习2-从门电路到运算","content":"门电路电路类型同步数字电路有两种类型：\n\n组合逻辑\n输出只是输入的函数，和历史状态无关\n如：加法器\n\n\n时序逻辑\n能够存储信息，也即是与历史状态有关\n如：寄存器\n\n\n\n逻辑门NOT真值表：\n\n\n\na\nc\n\n\n\n0\n1\n\n\n1\n0\n\n\nAND真值表：\n\n\n\na\nb\nc\n\n\n\n0\n0\n0\n\n\n0\n1\n0\n\n\n1\n0\n0\n\n\n1\n1\n1\n\n\nOR真值表：\n\n\n\na\nb\nc\n\n\n\n0\n0\n0\n\n\n0\n1\n1\n\n\n1\n0\n1\n\n\n1\n1\n1\n\n\nNAND真值表：\n\n\n\na\nb\nc\n\n\n\n0\n0\n1\n\n\n0\n1\n1\n\n\n1\n0\n1\n\n\n1\n1\n0\n\n\nNOR真值表：\n\n\n\na\nb\nc\n\n\n\n0\n0\n1\n\n\n0\n1\n0\n\n\n1\n0\n0\n\n\n1\n1\n0\n\n\nXOR真值表：\n\n\n\na\nb\nc\n\n\n\n0\n0\n0\n\n\n0\n1\n1\n\n\n1\n0\n1\n\n\n1\n1\n0\n\n\n更复杂的真值表举个例子：三选二表决\n\n\n\na\nb\nc\ny\n\n\n\n0\n0\n0\n0\n\n\n0\n0\n1\n0\n\n\n0\n1\n0\n0\n\n\n0\n1\n1\n1\n\n\n1\n0\n0\n0\n\n\n1\n0\n1\n1\n\n\n1\n1\n0\n1\n\n\n1\n1\n1\n1\n\n\n真值表变成布尔表达式以下根据该真值表，变量为1的话就取变量名，反之取NOT变量名：\n\n\n\na\nb\nc\n\n\n\n0\n0\n0\n\n\n0\n1\n1\n\n\n1\n0\n1\n\n\n1\n1\n0\n\n\nSoP(积项求和)类似于主析取范式（？），把结果为1的最小项给析取了，即踩中一个最小项就为1。\n\nPoS(和项求积)类似于主和取范式，把结果为0的最大项合取，只有不踩中任何一个最大项才是1。\n\n布尔表达式化简基本定律其实就是离散数学那堆东西：其中最常用的就是分配律\n举个栗子对于这一个式子，电路如下：\n具体过程为：\n\n结果就是a与c的或，相比最初简单了不少。\n组合逻辑的转换大致如ppt上的图所示，除了真值表转电路图比较麻烦之外，其他的其实都很直观：\n电路化简\n遍历建立真值表，之后用SoP或者PoS化简\n写出电路对应表达式，对表达式化简\n\n第一种较为简单，不举例子了。对于第二种来说，化简和之前一样，此处举一个电路对应表达式的例子：\n从输入到输出，依次建立表达式子(标记在线边上)，但是，写式子的时候我觉得应该从输出往回看，因为只有最后那个最大：\n\n由此得知，可以电路化简为：\n卡诺图化简表达式\n\n\n\n\n\n\n\n\n本质：利用相邻项一次化简一个比如和\n步骤：\n\n构建卡诺图，其实就是一个方格，比如五变量的分为2和3，2变量方向有格，3变量方向格\n填1，比如四变量的SoP里面出现了这一项，那么ab（2变量）方向上对应10的格且cd方向上对应01、11的格得标注为1，即坐标为(10,01)(10,11)这俩。\n根据以下规则画圈：\n组内有效单元的个数必须是2的整数幂\n应该选择尽可能大的组\n注意4角的单元\n避免出现单个单元\n\n\n\n举个例子：根据画圈的不同可以化简为：\n\n运算一位加法器对于单独一位来说，加法需要“本位”和“进位”，分别为和，而上一位的进位是：\n\n\n\n\n\n\n\n\n\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n1\n1\n0\n\n\n0\n1\n0\n1\n0\n\n\n0\n1\n1\n0\n1\n\n\n1\n0\n0\n1\n0\n\n\n1\n0\n1\n0\n1\n\n\n1\n1\n0\n0\n1\n\n\n1\n1\n1\n1\n1\n\n\n对于和各自可以列出SoP形式的式子：\n\n串行加法器对于每个加法器来说，输入是本位的和，上一位的进位也是输入，而输出是本位的值和往下一位的进位，由此组成一个串：\n其中可以看出，第0位的进位为0，因为其之前并没有进位，根本没有数字。\n总结\n门电路：多种逻辑门的表示以及几种化简方法（卡诺图、规则化简）\n运算：构建一个串行加法器\n\n","slug":"buaa-co-pre-2","date":"2024-07-28T16:00:00.000Z","categories_index":"北航计组,学习笔记","tags_index":"计算机组成原理","author_index":"大仓鼠"},{"id":"ee17b1d2d4f98e58465a0cc1225842a7","title":"北航计组-预习0-预习准备","content":"计组预习-Part0第一天预习就先看一下课程内容，我打算先从课程内容开始，整理一下预习的过程，然后按顺序预习，中途可以补一些题或者看一下教材，主要还是打算用往年课件作为第一次预习的资料，符合我个人习惯一些。\n课程组成目标反正就是学硬件、软硬件协同、设计硬件、从数电到MIPS到MIPS程序\n大概有的课\n概论一节\n组合、时序逻辑（似乎电电B讲过了）\n存储器、存储系统、方式\n指令、汇编\nMIPS不同的课会排在不同的时间，具体看到时候安排吧。\n\n学习内容\n基本原理\n硬件描述语言（HDL）\nVerilog\n软件工具：logisim\n软件工具：MARS\n软硬件调试\n\n预习安排大致上我应该每一讲都会写一次笔记，前面会附上本次课程的目标与内容，顺序上先学习理论课，实验课后续补上，中途我可能会自己穿插一些练习，不再赘述，参考网站我也会附上的。其他有些资源我会扔到OSS上面，有需要的可以看情况下载。\n课程安排应该是预备阶段week1-6，后续是任务阶段week7-17，我打算先把预备阶段准备好，后续P0-P8再说吧，先不急。\n一点疑惑似乎2022课件相比2018课件把存储部分都删了？\n","slug":"buaa-co-pre-0","date":"2024-07-26T16:00:00.000Z","categories_index":"北航计组,学习笔记","tags_index":"计算机组成原理","author_index":"大仓鼠"},{"id":"b8770cb77afe30b610a74e7f474f90fc","title":"北航计组-预习1-基本认识与数制","content":"基本认识计算机的基本认识发展过程\nENIAC；第一台数字式多用途计算机\n计算炮弹弹道（逃）\n\n\n大型机时代：20c50s-60s\n小型机时代：20c70s\nPC时代：20c80s-21c\n后PC时代：21c之后\n\n重大认识\n层次化表示与解释\n\n\n任何事物都可以表示为数字\n\n\n摩尔定律\n\n\n晶体管数量每两年翻倍\n\n\n局部性与存储层次\n并行性\n性能度量与改进\n\n计算机的应用与分类分类\nPC\n服务器\n服务器集群\n超级计算机\n嵌入式计算机（最大的计算机市场）\n\n计算机的基本硬件构成CPUCPU是计算机的最核心部件，其功能是能够执行由一组指令构成的程序。抽象为两个部分：数据通路、控制器\n\n数据通路：执行指令所需的计算与存储的功能部件集合\nPC：指向要执行的指令\nALU：完成各类计算，如加减乘除\n寄存器堆：临时性存储参与运算的数据以及运算结果\n\n\n控制器：根据指令控制数据通路的各个部件完成相应操作\n\n评价为：数据通路是干活的鼠鼠，控制器是指使干活的可恶猫猫。\n而对于现代主流CPU：通常包含cache、MMU，每个核心相当于过去的一个完整CPU\n主存储器也被称为内存，而CD、硬盘之类的东西叫做外存（辅存）\n早期内存只有几个K，现在动辄以G字节计数。\n计算机的层次结构一个完整的计算机系统，可以划分为硬件和软件两大部分。其中，两者之间的交互界面就是指令集：\n数制常见进制及其转换表示方法对于来说，它的值是：\n\n二进制每一位称之为一个bit。其基为{0,1}\n进制转换其实就是转换前的数一直除以转换后进制的进制数，之后取余数，从最低位到最高位，比如10转2进制：16、8、2进制的互转比较容易，因为刚好可以对应。\n常见术语\n字节byte\n由8个二进制位构成的一个元组，是目前计算机的数据单位\n\n\n字word\n根据计算机的不同而不同，可能是32位、64位等等\n\n\n最高有效位MSB\n最低有效位LSB\n最高有效字节MSB\n最低有效字节LSB\n高在左，低在右\n\n\n\n二进制加法步骤二进制加法与十进制加法原理类似，对应位相加就行，加到2就进位一个1即可：由于一个字的长度是有限制的，比如32位计算机最高位两个1相加，此时就会发生溢出（overflow），一般来说，CPU在溢出发生时，会通过称为异常（exception）的机制来报告这个错误。\n整数的二进制表示方法数字对于一个数字来说，其包含2部分内容:\n\n编码：就是数字本身，或者说是一种记号。例如007\n语义：编码所代表的概念的含义，是对编码的解释\n\n\n\n\n\n\n\n提示\n编码本身没有任何意义，编码只有被赋予语义后才有意义\n\n编码空间\n编码空间：有效编码的集合\n空间大小：有效编码的总数\n对于一个n位B进制数来说，其编码空间大小为\n\n\n\n\n\n\n\n\n\n提示\nQ：对于某个B进制来说，如何确定某个编码方案的编码位数？A：如果对象数量为N，则位数为\n\n二进制无符号数对于二进制无符号数如下：\n二进制符号数原码方案用最高位代表符号，0为正1为负，其余位数为绝对值，比如：\n\n\n\n\n\n\n\n\n\n缺点\n\n存在两个0，即和\n有效编码被浪费\n硬件加法难以实现\n\n\n编码数值不连续\n并且在正负区域并非连续增大\n\n\n\n\n\n补码方案用最高位代表符号，0为正1为负，100…000是最小的负数，而111…111是-1\n\n\n\n\n\n\n特点\n\n只有一个0\n符号确定后，数值随编码增长而增长\n\n\n\n表示范围可以为-2147483648到2147483647\n对于一个的N位二进制补码代表的数，它的值为：\n\n\n\n\n\n\n\n小结\n\n现代计算机普遍采用\n使用最高位作为符号位\n负数区间比正数区间多一个数\n相反数计算方法：各位取反，然后加1\n\n\n\n浮点数的二进制表示方法浮点数格式每个浮点数都类似科学计数法可以表述为：\n其中M为尾数，B为基数，E为指数\n\n包含符号S，尾数、指数、基数，其中基数被省略了\n符号一位，0正1负\n指数八位，表示范围\n尾数23位，表示精度\n基数默认为2\n\n我们考虑到二进制尾数的第一位保证是1，如果不是的话说明指数取大了，那么为了优化，我们可以默认尾数最高位为1，这样就可以在尾数里面多一位有效的存储位了，只是计算的时候得补回来，我们以为例：\n此时尾数1.010001101110，我们优化成010001101110\n\n\n\n\n\n\n提示\n绝对值小于1的浮点数的二进制编码对应的数相比其大于1的数更大一些，因为其指数部分是负数，取补码的时候最高位为1，比指数为正的数字会更大一些。\n\n偏阶计数法本质上就是把编码用的指数变成真实指数（的二进制）加上十进制的127，即，此时就可以让对应最小的负指数（即0减去127）了，同时是最大的正指数（255减去127）但是由于一些特殊情况，比如正负无穷和NaN的存在，导致实际上最大正指数是254-127=127，同理最小其实是1-127=-126\n\n\n\n\n\n\n提示\nIEEE754浮点标准即此方法\n\n此时表示范围也很明确了，比如正数范围最大是：，即除了第一位符号位是0，其他位全为1的数字。正数范围最小则为后23位是1，指数为全0的数：\n负数区间和正数区间完全对称，此处略。\n双精度浮点IEEE754还规定了双精度浮点，也就是占据64位的浮点数，与单精度浮点区别如下：\n范围绝对值为从到\n特殊情况编码规则如下表：\n上溢和下溢当一个数绝对值超过了上界就是上溢，当作正负无穷处理，如果绝对值在下界和0之间那就是下溢，当作0来处理\n补码的几种常见运算计算相反数的补码很简单，先算正数的，之后全部取反再加一。比如我们计算-14的补码：\n\n14是\n取反就是\n再加一得到-14的补码：同理，从-14得到14的补码也是取反再加一，这种方法适用于所有求相反数的情况。\n\n减法补码的优势在减法中充分体现：我们知道计算x+y很简单，只需要按位加法就行，只需要一套关于加法的电路，而补码的优势在于求减法的时候x-y可以变成**x+(-y)**，这时候就把减法化成加法和相反数了（在相反数的过程中也只有一次加法）。\n位拓展符号拓展需要先把一位的符号位复制过去到高位，其余对应位数对应复制过去即可。如下：\n符号拓展其实本质是一样的，但是高位全部置0，低位复制过去即可：\n比较=、≠、&gt;、&lt;、≥、≤这六种比较都可以通过&lt;和=符号来实现，此处略，很简单的。\n小于符号的实现我们判断a小于b是通过a-b小于0来实现的，实际使用中判断a-b的符号位即可判断是否小于。\n符号数在一个字是4bit的时候，遇上，的时候，结果会因为溢出，变成，此时符号位变成了1，判断为a比b小，很明显是不对的。对于这种情况我们就需要符号位拓展：\n\n2个N位二进制补码的操作数均扩展1位符号位（即在最高位的左侧加上一位一摸一样的符号位）\n进行N+1位二进制补码的减法计算\n\n此时会发现，符号位为0，那么判断为a比b大，符合实际情况。\n无符号数如果两个数都是无符号数，需要将这俩个数视作符号数之后符号位拓展，并且都拓展一个0即可同上判断了。\n相等符号的实现\n使用XOR运算得到一个c，对c的每一位做OR运算得到一个bit，为1则为假，反之为真\n执行减法运算得到一个c，之后同上\n\n乘法基本原理就是无符号数的乘法。步骤就是先把a和b的绝对值按照无符号数乘法算出来，最后单独判断符号。TODO:讲义内没说怎么做的无符号数乘法，后面再看无符号数乘法和手算乘法一样，但是由于只有0和1更加简单，对应每一位乘数，如果该位为1，则将被乘数复制到位积内，若为0，这该位对应的位积为0，从低位到高位每个乘数的位都进行一次操作，最后按照乘数每一位的位置n，对各个位积向左移位n次，再累加即可。\n除法对于计算机来说除法最难实现，核心是“试商”。对于二进制数，商只会有0和1两种情况，较为简单：\n\n计算商的每位时，仅需做一次减法\n根据减法结果的符号位判断是否够减如下图所示：\n\n无符号数除法流程与上方相同，每次从被除数取出一位，构成中间余数的末位，然后“试商”，用中间余数减去除数，根据结果判断商的这一位是否为1，如果除数有N位，一定记住符号位拓展，中间余数得拓展到N+1位。\n符号数除法先取绝对值做除法，之后单独判断符号，略。\n总结计算机基本认识没啥用，随便看看得了\n数制\n掌握变换数制的方法\n掌握浮点数的编码（1+8+23）\n了解加减乘除运算的原理（都是基于加法（和一些内置运算））\n\n","slug":"buaa-co-pre-1","date":"2024-07-26T16:00:00.000Z","categories_index":"北航计组,学习笔记","tags_index":"计算机组成原理","author_index":"大仓鼠"},{"id":"73415a1b5e681c28d78c3a872e437bc5","title":"折腾笔记-基于GithubPages制作博客里世界","content":"折腾目标当前有什么\n\n\n\n\n\n已经备好了\n一个已经实名的顶级域名\n\n我要干什么\n\n\n\n\n\n目标\n搭建一个Github Page并且和本地HEXO利用git联动建立二级域名CNAME解析到新的博客二级域名SSL安装好网站访问加速（TODO）\n\n折腾开始！建立Github Pages进入Github，点击你的repo进去并且点击new从而新建一个repo。输入你的repository名字，必须为你的用户名.GitHub.io这个格式。其他的选项都可以默认即可进入新建的repo，点击settings，在source选择deploy from a branch至此，GitHub这边初步配置差不多了，目前你访问你的用户名.github.io暂时还不会有反应，因为GitHub pages更新页面需要时间，而且默认会扫描index.html&#x2F;README.md&#x2F;index之类的文件作为首页，但是目前repo是空的，所以不会显示任何内容，但是这是正常的，我们之后会往GitHub上面部署我们的网站。\n\n一点修改（感谢2006-TrickEye）\n其实不一定非要是username.github.io，如果你对你的名字叫做repo的仓库打开GitHub Pages，部署出来的结果会挂到username.github.io&#x2F;repo&#x2F;下面\n\n本地配置hexo首先你需要安装Node.js 和 npm，此处可以参考✨这个网页✨，务必记住配置环境变量，但是你使用这个网页内的Windows Node版本管理器内的nodist的话就不需要自己设置了，安装好直接下一步就好。\n以上安装好之后效果如下，如果没有的话检查一下环境变量的path里面有没有对应的文件夹：\nbash$ npm --version\n10.8.2\n$ node -v\nv20.9.0本地新建文件夹，比如叫做blog，用来存放本地hexo仓库文件，在powershell里面打开这个文件夹。之后的步骤因为不可抗力原因🧱，请使用科学上网，如使用代理的话请输入下面的命令：\nbash$ npm config set proxy http://127.0.0.1:你自己的代理端口\n$ npm config set https-proxy http://127.0.0.1:你自己的代理端口如果你实在没有代理，那么可以换淘宝源：\nbash$ npm config set registry http://registry.npm.taobao.org/\n$ npm config set registry https://registry.npmjs.org/\n\n\n\n\n\n如果你不知道的话有一个小tips\n大部分clash默认http和https的混合端口为7897但是你明明可以点开看一眼的……\n\n之后就可以快乐安装hexo辣！依次输入以下命令即可：\nbash$ npm install -g hexo-cli\n$ hexo init\n$ hexo s\n\n\n\n\n\n\n注意\nhexo init由于需要连接github，但是众所周知会出现网络问题，如果你能连上的话这里就忽略掉吧，连不上的可以按照下面的方法解决。你需要把C:\\Users\\你的电脑用户名\\AppData\\Roaming\\npm\\node_modules\\hexo-cli\\lib\\console\\init.js里面的内容如下修改：\njavascript本来是这样的：\nconst GIT_REPO_URL = &#39;https://github.com/hexojs/hexo-starter.git&#39;;\n你得改成这样：\nconst GIT_REPO_URL = &#39;https://github.com.cnpmjs.org/hexojs/hexo-starter.git&#39;;\n\n在hexo init之后你会发现你的文件夹里面变成了这样：如果略有不同不用担心，我这个已经是部署之后的了，改了好些。之后进浏览器输入localhost:4000，就可以看见默认的hexo静态网页了！\n本地配置git并和GitHub连上之后你需要安装本地的git，如果你是Linux，那么只需要用你系统的包管理器安装即可，此处忽略，如果你是Windows，请去✨官方网页✨下载安装，安装过程全部默认就行，并且同样的，你需要把git给放到环境变量里面。\n但是众所周知，我们网络是十分安全滴，所以你需要设置好ssh来连接。进入git的命令行（git bash），输入：\nbash$ cd ~/.ssh\n$ ssh-keygen -t rsa -C &#39;你GitHub注册用的邮箱地址&#39;这个时候你C盘用户文件夹里面.ssh文件夹中就多了id_rsa和id_rsa.pub这两个文件了，双击用记事本（或者vscode之类的编辑器）打开id_rsa.pub复制里面的key。\n之后进入GitHub网页，右上角头像点开，选择settings：点击SSH and GPG keys，选择New SSH key：之后把你剪贴板复制到key里面就行，名字填任何什么都行。\n最后我们验证+绑定一下：\nbash$ ssh -T git@github.com\n$ git config --global user.name &quot;注册时用户名&quot;\n$ git config --global user.email &quot;注册时邮箱&quot;远程部署hexo回到你的hexo本地目录，编辑一个叫做_config.yml的文件，拉到最下面deploy一项，如下修改：\nymldeploy:\n  type: git\n  repository: https://github.com/你的用户名/你的用户名.GitHub.io.git\n  branch: main修改后即可部署，一般来说你还需要安装一个工具：\nbash$ npm install hexo-deployer-git之后就可以三件套（清理、生成、部署）：\nbash$ hexo clean\n$ hexo g\n$ hexo d耐心等待几分钟之后，你就可以在你的用户名.github.io看见你的网站辣！\n设置dns解析在你的域名提供商那里找到dns解析一项，博主此处以阿里云的万网为例：我们需要添加一条CNAME记录，从而将一个域名解析到另一个域名。\n之后在你的本地hexo文件夹里面的source里面新建一个文件，名字叫做CNAME，无后缀，内容填写为你的域名，比如我的域名是buaa.spotterblog.cn，只需要写进去保存即可，我在此处用的是二级域名，如果你是顶级域名的话也一样写进去即可。\n之后再次三件套就好啦！\nbash$ hexo clean\n$ hexo g\n$ hexo d为了更完美一些，回到你的repo的设置，点到pages里面，我们会发现Custom domain已经变成了我们CNAME这个文件中写的内容了，我们勾选上下方的Enforce HTTPS即可，GitHub会为我们的域名自动申请并安装SSL证书，我们就可以用HTTPS安全的访问我们的博客了！\n折腾总结我们弄好了本地HEXO与git，并且部署到GitHub，利用GitHub Pages托管了我们的网页，同时把自己的域名解析到了GitHub的给我们的域名上，实现了用自己的域名访问。\n一些附加内容由于GitHub Pages访问慢，我们可以把图片挂到各类OSS上，博客文章直接引用外链即可，并且利用CDN来实现加速访问，同时Cloudflare也能实现内地的加速。\n","slug":"net-daily-ssl-domain","date":"2024-07-25T16:00:00.000Z","categories_index":"折腾笔记,网页","tags_index":"GithubPages,SSL,Nginx","author_index":"大仓鼠"}]